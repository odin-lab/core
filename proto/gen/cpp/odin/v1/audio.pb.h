// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: odin/v1/audio.proto
// Protobuf C++ Version: 6.31.1

#ifndef odin_2fv1_2faudio_2eproto_2epb_2eh
#define odin_2fv1_2faudio_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "odin/v1/common.pb.h"
#include "odin/v1/options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_odin_2fv1_2faudio_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_odin_2fv1_2faudio_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_odin_2fv1_2faudio_2eproto;
}  // extern "C"
namespace odin {
namespace v1 {
class AudioBufferMic;
struct AudioBufferMicDefaultTypeInternal;
extern AudioBufferMicDefaultTypeInternal _AudioBufferMic_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull AudioBufferMic_class_data_;
class AudioBufferSpeaker;
struct AudioBufferSpeakerDefaultTypeInternal;
extern AudioBufferSpeakerDefaultTypeInternal _AudioBufferSpeaker_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull AudioBufferSpeaker_class_data_;
}  // namespace v1
}  // namespace odin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace odin {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class AudioBufferSpeaker final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odin.v1.AudioBufferSpeaker) */ {
 public:
  inline AudioBufferSpeaker() : AudioBufferSpeaker(nullptr) {}
  ~AudioBufferSpeaker() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioBufferSpeaker* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioBufferSpeaker));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioBufferSpeaker(::google::protobuf::internal::ConstantInitialized);

  inline AudioBufferSpeaker(const AudioBufferSpeaker& from) : AudioBufferSpeaker(nullptr, from) {}
  inline AudioBufferSpeaker(AudioBufferSpeaker&& from) noexcept
      : AudioBufferSpeaker(nullptr, ::std::move(from)) {}
  inline AudioBufferSpeaker& operator=(const AudioBufferSpeaker& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioBufferSpeaker& operator=(AudioBufferSpeaker&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioBufferSpeaker& default_instance() {
    return *reinterpret_cast<const AudioBufferSpeaker*>(
        &_AudioBufferSpeaker_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AudioBufferSpeaker& a, AudioBufferSpeaker& b) { a.Swap(&b); }
  inline void Swap(AudioBufferSpeaker* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioBufferSpeaker* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioBufferSpeaker* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AudioBufferSpeaker>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioBufferSpeaker& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioBufferSpeaker& from) { AudioBufferSpeaker::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioBufferSpeaker* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odin.v1.AudioBufferSpeaker"; }

 protected:
  explicit AudioBufferSpeaker(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  AudioBufferSpeaker(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AudioBufferSpeaker& from);
  AudioBufferSpeaker(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, AudioBufferSpeaker&& from) noexcept
      : AudioBufferSpeaker(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAudioFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // .odin.v1.AudioData audio = 1 [json_name = "audio"];
  bool has_audio() const;
  void clear_audio() ;
  const ::odin::v1::AudioData& audio() const;
  [[nodiscard]] ::odin::v1::AudioData* PROTOBUF_NULLABLE release_audio();
  ::odin::v1::AudioData* PROTOBUF_NONNULL mutable_audio();
  void set_allocated_audio(::odin::v1::AudioData* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_audio(::odin::v1::AudioData* PROTOBUF_NULLABLE value);
  ::odin::v1::AudioData* PROTOBUF_NULLABLE unsafe_arena_release_audio();

  private:
  const ::odin::v1::AudioData& _internal_audio() const;
  ::odin::v1::AudioData* PROTOBUF_NONNULL _internal_mutable_audio();

  public:
  // .odin.v1.MessageInfo info = 2 [json_name = "info"];
  bool has_info() const;
  void clear_info() ;
  const ::odin::v1::MessageInfo& info() const;
  [[nodiscard]] ::odin::v1::MessageInfo* PROTOBUF_NULLABLE release_info();
  ::odin::v1::MessageInfo* PROTOBUF_NONNULL mutable_info();
  void set_allocated_info(::odin::v1::MessageInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_info(::odin::v1::MessageInfo* PROTOBUF_NULLABLE value);
  ::odin::v1::MessageInfo* PROTOBUF_NULLABLE unsafe_arena_release_info();

  private:
  const ::odin::v1::MessageInfo& _internal_info() const;
  ::odin::v1::MessageInfo* PROTOBUF_NONNULL _internal_mutable_info();

  public:
  // @@protoc_insertion_point(class_scope:odin.v1.AudioBufferSpeaker)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const AudioBufferSpeaker& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::odin::v1::AudioData* PROTOBUF_NULLABLE audio_;
    ::odin::v1::MessageInfo* PROTOBUF_NULLABLE info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odin_2fv1_2faudio_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull AudioBufferSpeaker_class_data_;
// -------------------------------------------------------------------

class AudioBufferMic final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odin.v1.AudioBufferMic) */ {
 public:
  inline AudioBufferMic() : AudioBufferMic(nullptr) {}
  ~AudioBufferMic() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioBufferMic* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioBufferMic));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioBufferMic(::google::protobuf::internal::ConstantInitialized);

  inline AudioBufferMic(const AudioBufferMic& from) : AudioBufferMic(nullptr, from) {}
  inline AudioBufferMic(AudioBufferMic&& from) noexcept
      : AudioBufferMic(nullptr, ::std::move(from)) {}
  inline AudioBufferMic& operator=(const AudioBufferMic& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioBufferMic& operator=(AudioBufferMic&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioBufferMic& default_instance() {
    return *reinterpret_cast<const AudioBufferMic*>(
        &_AudioBufferMic_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AudioBufferMic& a, AudioBufferMic& b) { a.Swap(&b); }
  inline void Swap(AudioBufferMic* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioBufferMic* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioBufferMic* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AudioBufferMic>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioBufferMic& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioBufferMic& from) { AudioBufferMic::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioBufferMic* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odin.v1.AudioBufferMic"; }

 protected:
  explicit AudioBufferMic(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  AudioBufferMic(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AudioBufferMic& from);
  AudioBufferMic(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, AudioBufferMic&& from) noexcept
      : AudioBufferMic(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAudioFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // .odin.v1.AudioData audio = 1 [json_name = "audio"];
  bool has_audio() const;
  void clear_audio() ;
  const ::odin::v1::AudioData& audio() const;
  [[nodiscard]] ::odin::v1::AudioData* PROTOBUF_NULLABLE release_audio();
  ::odin::v1::AudioData* PROTOBUF_NONNULL mutable_audio();
  void set_allocated_audio(::odin::v1::AudioData* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_audio(::odin::v1::AudioData* PROTOBUF_NULLABLE value);
  ::odin::v1::AudioData* PROTOBUF_NULLABLE unsafe_arena_release_audio();

  private:
  const ::odin::v1::AudioData& _internal_audio() const;
  ::odin::v1::AudioData* PROTOBUF_NONNULL _internal_mutable_audio();

  public:
  // .odin.v1.MessageInfo info = 2 [json_name = "info"];
  bool has_info() const;
  void clear_info() ;
  const ::odin::v1::MessageInfo& info() const;
  [[nodiscard]] ::odin::v1::MessageInfo* PROTOBUF_NULLABLE release_info();
  ::odin::v1::MessageInfo* PROTOBUF_NONNULL mutable_info();
  void set_allocated_info(::odin::v1::MessageInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_info(::odin::v1::MessageInfo* PROTOBUF_NULLABLE value);
  ::odin::v1::MessageInfo* PROTOBUF_NULLABLE unsafe_arena_release_info();

  private:
  const ::odin::v1::MessageInfo& _internal_info() const;
  ::odin::v1::MessageInfo* PROTOBUF_NONNULL _internal_mutable_info();

  public:
  // @@protoc_insertion_point(class_scope:odin.v1.AudioBufferMic)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const AudioBufferMic& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::odin::v1::AudioData* PROTOBUF_NULLABLE audio_;
    ::odin::v1::MessageInfo* PROTOBUF_NULLABLE info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odin_2fv1_2faudio_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull AudioBufferMic_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AudioBufferMic

// .odin.v1.AudioData audio = 1 [json_name = "audio"];
inline bool AudioBufferMic::has_audio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_ != nullptr);
  return value;
}
inline const ::odin::v1::AudioData& AudioBufferMic::_internal_audio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::odin::v1::AudioData* p = _impl_.audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::odin::v1::AudioData&>(::odin::v1::_AudioData_default_instance_);
}
inline const ::odin::v1::AudioData& AudioBufferMic::audio() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odin.v1.AudioBufferMic.audio)
  return _internal_audio();
}
inline void AudioBufferMic::unsafe_arena_set_allocated_audio(
    ::odin::v1::AudioData* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_);
  }
  _impl_.audio_ = reinterpret_cast<::odin::v1::AudioData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:odin.v1.AudioBufferMic.audio)
}
inline ::odin::v1::AudioData* PROTOBUF_NULLABLE AudioBufferMic::release_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::odin::v1::AudioData* released = _impl_.audio_;
  _impl_.audio_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::odin::v1::AudioData* PROTOBUF_NULLABLE AudioBufferMic::unsafe_arena_release_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odin.v1.AudioBufferMic.audio)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::odin::v1::AudioData* temp = _impl_.audio_;
  _impl_.audio_ = nullptr;
  return temp;
}
inline ::odin::v1::AudioData* PROTOBUF_NONNULL AudioBufferMic::_internal_mutable_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.audio_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::odin::v1::AudioData>(GetArena());
    _impl_.audio_ = reinterpret_cast<::odin::v1::AudioData*>(p);
  }
  return _impl_.audio_;
}
inline ::odin::v1::AudioData* PROTOBUF_NONNULL AudioBufferMic::mutable_audio()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::odin::v1::AudioData* _msg = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:odin.v1.AudioBufferMic.audio)
  return _msg;
}
inline void AudioBufferMic::set_allocated_audio(::odin::v1::AudioData* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.audio_ = reinterpret_cast<::odin::v1::AudioData*>(value);
  // @@protoc_insertion_point(field_set_allocated:odin.v1.AudioBufferMic.audio)
}

// .odin.v1.MessageInfo info = 2 [json_name = "info"];
inline bool AudioBufferMic::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline const ::odin::v1::MessageInfo& AudioBufferMic::_internal_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::odin::v1::MessageInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::odin::v1::MessageInfo&>(::odin::v1::_MessageInfo_default_instance_);
}
inline const ::odin::v1::MessageInfo& AudioBufferMic::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odin.v1.AudioBufferMic.info)
  return _internal_info();
}
inline void AudioBufferMic::unsafe_arena_set_allocated_info(
    ::odin::v1::MessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::odin::v1::MessageInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:odin.v1.AudioBufferMic.info)
}
inline ::odin::v1::MessageInfo* PROTOBUF_NULLABLE AudioBufferMic::release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::odin::v1::MessageInfo* released = _impl_.info_;
  _impl_.info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::odin::v1::MessageInfo* PROTOBUF_NULLABLE AudioBufferMic::unsafe_arena_release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odin.v1.AudioBufferMic.info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::odin::v1::MessageInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::odin::v1::MessageInfo* PROTOBUF_NONNULL AudioBufferMic::_internal_mutable_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::odin::v1::MessageInfo>(GetArena());
    _impl_.info_ = reinterpret_cast<::odin::v1::MessageInfo*>(p);
  }
  return _impl_.info_;
}
inline ::odin::v1::MessageInfo* PROTOBUF_NONNULL AudioBufferMic::mutable_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::odin::v1::MessageInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:odin.v1.AudioBufferMic.info)
  return _msg;
}
inline void AudioBufferMic::set_allocated_info(::odin::v1::MessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.info_ = reinterpret_cast<::odin::v1::MessageInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:odin.v1.AudioBufferMic.info)
}

// -------------------------------------------------------------------

// AudioBufferSpeaker

// .odin.v1.AudioData audio = 1 [json_name = "audio"];
inline bool AudioBufferSpeaker::has_audio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_ != nullptr);
  return value;
}
inline const ::odin::v1::AudioData& AudioBufferSpeaker::_internal_audio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::odin::v1::AudioData* p = _impl_.audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::odin::v1::AudioData&>(::odin::v1::_AudioData_default_instance_);
}
inline const ::odin::v1::AudioData& AudioBufferSpeaker::audio() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odin.v1.AudioBufferSpeaker.audio)
  return _internal_audio();
}
inline void AudioBufferSpeaker::unsafe_arena_set_allocated_audio(
    ::odin::v1::AudioData* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_);
  }
  _impl_.audio_ = reinterpret_cast<::odin::v1::AudioData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:odin.v1.AudioBufferSpeaker.audio)
}
inline ::odin::v1::AudioData* PROTOBUF_NULLABLE AudioBufferSpeaker::release_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::odin::v1::AudioData* released = _impl_.audio_;
  _impl_.audio_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::odin::v1::AudioData* PROTOBUF_NULLABLE AudioBufferSpeaker::unsafe_arena_release_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odin.v1.AudioBufferSpeaker.audio)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::odin::v1::AudioData* temp = _impl_.audio_;
  _impl_.audio_ = nullptr;
  return temp;
}
inline ::odin::v1::AudioData* PROTOBUF_NONNULL AudioBufferSpeaker::_internal_mutable_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.audio_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::odin::v1::AudioData>(GetArena());
    _impl_.audio_ = reinterpret_cast<::odin::v1::AudioData*>(p);
  }
  return _impl_.audio_;
}
inline ::odin::v1::AudioData* PROTOBUF_NONNULL AudioBufferSpeaker::mutable_audio()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::odin::v1::AudioData* _msg = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:odin.v1.AudioBufferSpeaker.audio)
  return _msg;
}
inline void AudioBufferSpeaker::set_allocated_audio(::odin::v1::AudioData* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.audio_ = reinterpret_cast<::odin::v1::AudioData*>(value);
  // @@protoc_insertion_point(field_set_allocated:odin.v1.AudioBufferSpeaker.audio)
}

// .odin.v1.MessageInfo info = 2 [json_name = "info"];
inline bool AudioBufferSpeaker::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline const ::odin::v1::MessageInfo& AudioBufferSpeaker::_internal_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::odin::v1::MessageInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::odin::v1::MessageInfo&>(::odin::v1::_MessageInfo_default_instance_);
}
inline const ::odin::v1::MessageInfo& AudioBufferSpeaker::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odin.v1.AudioBufferSpeaker.info)
  return _internal_info();
}
inline void AudioBufferSpeaker::unsafe_arena_set_allocated_info(
    ::odin::v1::MessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::odin::v1::MessageInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:odin.v1.AudioBufferSpeaker.info)
}
inline ::odin::v1::MessageInfo* PROTOBUF_NULLABLE AudioBufferSpeaker::release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::odin::v1::MessageInfo* released = _impl_.info_;
  _impl_.info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::odin::v1::MessageInfo* PROTOBUF_NULLABLE AudioBufferSpeaker::unsafe_arena_release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odin.v1.AudioBufferSpeaker.info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::odin::v1::MessageInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::odin::v1::MessageInfo* PROTOBUF_NONNULL AudioBufferSpeaker::_internal_mutable_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::odin::v1::MessageInfo>(GetArena());
    _impl_.info_ = reinterpret_cast<::odin::v1::MessageInfo*>(p);
  }
  return _impl_.info_;
}
inline ::odin::v1::MessageInfo* PROTOBUF_NONNULL AudioBufferSpeaker::mutable_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::odin::v1::MessageInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:odin.v1.AudioBufferSpeaker.info)
  return _msg;
}
inline void AudioBufferSpeaker::set_allocated_info(::odin::v1::MessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.info_ = reinterpret_cast<::odin::v1::MessageInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:odin.v1.AudioBufferSpeaker.info)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace odin


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // odin_2fv1_2faudio_2eproto_2epb_2eh
