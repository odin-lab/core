// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: odin/v1/audio.proto
// Protobuf C++ Version: 6.31.1

#ifndef odin_2fv1_2faudio_2eproto_2epb_2eh
#define odin_2fv1_2faudio_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "odin/v1/common.pb.h"
#include "odin/v1/options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_odin_2fv1_2faudio_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_odin_2fv1_2faudio_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_odin_2fv1_2faudio_2eproto;
}  // extern "C"
namespace odin {
namespace v1 {
class AudioInputChunk;
struct AudioInputChunkDefaultTypeInternal;
extern AudioInputChunkDefaultTypeInternal _AudioInputChunk_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull AudioInputChunk_class_data_;
class AudioOutputSpeech;
struct AudioOutputSpeechDefaultTypeInternal;
extern AudioOutputSpeechDefaultTypeInternal _AudioOutputSpeech_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull AudioOutputSpeech_class_data_;
class AudioOutputVisualization;
struct AudioOutputVisualizationDefaultTypeInternal;
extern AudioOutputVisualizationDefaultTypeInternal _AudioOutputVisualization_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull AudioOutputVisualization_class_data_;
}  // namespace v1
}  // namespace odin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace odin {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class AudioOutputVisualization final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odin.v1.AudioOutputVisualization) */ {
 public:
  inline AudioOutputVisualization() : AudioOutputVisualization(nullptr) {}
  ~AudioOutputVisualization() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioOutputVisualization* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioOutputVisualization));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioOutputVisualization(::google::protobuf::internal::ConstantInitialized);

  inline AudioOutputVisualization(const AudioOutputVisualization& from) : AudioOutputVisualization(nullptr, from) {}
  inline AudioOutputVisualization(AudioOutputVisualization&& from) noexcept
      : AudioOutputVisualization(nullptr, ::std::move(from)) {}
  inline AudioOutputVisualization& operator=(const AudioOutputVisualization& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioOutputVisualization& operator=(AudioOutputVisualization&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioOutputVisualization& default_instance() {
    return *reinterpret_cast<const AudioOutputVisualization*>(
        &_AudioOutputVisualization_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AudioOutputVisualization& a, AudioOutputVisualization& b) { a.Swap(&b); }
  inline void Swap(AudioOutputVisualization* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioOutputVisualization* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioOutputVisualization* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AudioOutputVisualization>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioOutputVisualization& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioOutputVisualization& from) { AudioOutputVisualization::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioOutputVisualization* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odin.v1.AudioOutputVisualization"; }

 protected:
  explicit AudioOutputVisualization(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  AudioOutputVisualization(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AudioOutputVisualization& from);
  AudioOutputVisualization(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, AudioOutputVisualization&& from) noexcept
      : AudioOutputVisualization(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAudioLevelsFieldNumber = 1,
    kSessionFieldNumber = 2,
  };
  // repeated float audio_levels = 1 [json_name = "audioLevels"];
  int audio_levels_size() const;
  private:
  int _internal_audio_levels_size() const;

  public:
  void clear_audio_levels() ;
  float audio_levels(int index) const;
  void set_audio_levels(int index, float value);
  void add_audio_levels(float value);
  const ::google::protobuf::RepeatedField<float>& audio_levels() const;
  ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL mutable_audio_levels();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_audio_levels() const;
  ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL _internal_mutable_audio_levels();

  public:
  // .odin.v1.SessionInfo session = 2 [json_name = "session"];
  bool has_session() const;
  void clear_session() ;
  const ::odin::v1::SessionInfo& session() const;
  [[nodiscard]] ::odin::v1::SessionInfo* PROTOBUF_NULLABLE release_session();
  ::odin::v1::SessionInfo* PROTOBUF_NONNULL mutable_session();
  void set_allocated_session(::odin::v1::SessionInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_session(::odin::v1::SessionInfo* PROTOBUF_NULLABLE value);
  ::odin::v1::SessionInfo* PROTOBUF_NULLABLE unsafe_arena_release_session();

  private:
  const ::odin::v1::SessionInfo& _internal_session() const;
  ::odin::v1::SessionInfo* PROTOBUF_NONNULL _internal_mutable_session();

  public:
  // @@protoc_insertion_point(class_scope:odin.v1.AudioOutputVisualization)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const AudioOutputVisualization& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> audio_levels_;
    ::odin::v1::SessionInfo* PROTOBUF_NULLABLE session_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odin_2fv1_2faudio_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull AudioOutputVisualization_class_data_;
// -------------------------------------------------------------------

class AudioOutputSpeech final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odin.v1.AudioOutputSpeech) */ {
 public:
  inline AudioOutputSpeech() : AudioOutputSpeech(nullptr) {}
  ~AudioOutputSpeech() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioOutputSpeech* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioOutputSpeech));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioOutputSpeech(::google::protobuf::internal::ConstantInitialized);

  inline AudioOutputSpeech(const AudioOutputSpeech& from) : AudioOutputSpeech(nullptr, from) {}
  inline AudioOutputSpeech(AudioOutputSpeech&& from) noexcept
      : AudioOutputSpeech(nullptr, ::std::move(from)) {}
  inline AudioOutputSpeech& operator=(const AudioOutputSpeech& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioOutputSpeech& operator=(AudioOutputSpeech&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioOutputSpeech& default_instance() {
    return *reinterpret_cast<const AudioOutputSpeech*>(
        &_AudioOutputSpeech_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AudioOutputSpeech& a, AudioOutputSpeech& b) { a.Swap(&b); }
  inline void Swap(AudioOutputSpeech* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioOutputSpeech* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioOutputSpeech* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AudioOutputSpeech>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioOutputSpeech& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioOutputSpeech& from) { AudioOutputSpeech::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioOutputSpeech* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odin.v1.AudioOutputSpeech"; }

 protected:
  explicit AudioOutputSpeech(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  AudioOutputSpeech(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AudioOutputSpeech& from);
  AudioOutputSpeech(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, AudioOutputSpeech&& from) noexcept
      : AudioOutputSpeech(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAudioFieldNumber = 1,
    kSessionFieldNumber = 2,
  };
  // .odin.v1.AudioData audio = 1 [json_name = "audio"];
  bool has_audio() const;
  void clear_audio() ;
  const ::odin::v1::AudioData& audio() const;
  [[nodiscard]] ::odin::v1::AudioData* PROTOBUF_NULLABLE release_audio();
  ::odin::v1::AudioData* PROTOBUF_NONNULL mutable_audio();
  void set_allocated_audio(::odin::v1::AudioData* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_audio(::odin::v1::AudioData* PROTOBUF_NULLABLE value);
  ::odin::v1::AudioData* PROTOBUF_NULLABLE unsafe_arena_release_audio();

  private:
  const ::odin::v1::AudioData& _internal_audio() const;
  ::odin::v1::AudioData* PROTOBUF_NONNULL _internal_mutable_audio();

  public:
  // .odin.v1.SessionInfo session = 2 [json_name = "session"];
  bool has_session() const;
  void clear_session() ;
  const ::odin::v1::SessionInfo& session() const;
  [[nodiscard]] ::odin::v1::SessionInfo* PROTOBUF_NULLABLE release_session();
  ::odin::v1::SessionInfo* PROTOBUF_NONNULL mutable_session();
  void set_allocated_session(::odin::v1::SessionInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_session(::odin::v1::SessionInfo* PROTOBUF_NULLABLE value);
  ::odin::v1::SessionInfo* PROTOBUF_NULLABLE unsafe_arena_release_session();

  private:
  const ::odin::v1::SessionInfo& _internal_session() const;
  ::odin::v1::SessionInfo* PROTOBUF_NONNULL _internal_mutable_session();

  public:
  // @@protoc_insertion_point(class_scope:odin.v1.AudioOutputSpeech)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const AudioOutputSpeech& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::odin::v1::AudioData* PROTOBUF_NULLABLE audio_;
    ::odin::v1::SessionInfo* PROTOBUF_NULLABLE session_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odin_2fv1_2faudio_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull AudioOutputSpeech_class_data_;
// -------------------------------------------------------------------

class AudioInputChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odin.v1.AudioInputChunk) */ {
 public:
  inline AudioInputChunk() : AudioInputChunk(nullptr) {}
  ~AudioInputChunk() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioInputChunk* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioInputChunk));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioInputChunk(::google::protobuf::internal::ConstantInitialized);

  inline AudioInputChunk(const AudioInputChunk& from) : AudioInputChunk(nullptr, from) {}
  inline AudioInputChunk(AudioInputChunk&& from) noexcept
      : AudioInputChunk(nullptr, ::std::move(from)) {}
  inline AudioInputChunk& operator=(const AudioInputChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioInputChunk& operator=(AudioInputChunk&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioInputChunk& default_instance() {
    return *reinterpret_cast<const AudioInputChunk*>(
        &_AudioInputChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AudioInputChunk& a, AudioInputChunk& b) { a.Swap(&b); }
  inline void Swap(AudioInputChunk* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioInputChunk* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioInputChunk* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AudioInputChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioInputChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioInputChunk& from) { AudioInputChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioInputChunk* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odin.v1.AudioInputChunk"; }

 protected:
  explicit AudioInputChunk(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  AudioInputChunk(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AudioInputChunk& from);
  AudioInputChunk(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, AudioInputChunk&& from) noexcept
      : AudioInputChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAudioFieldNumber = 1,
    kSessionFieldNumber = 2,
  };
  // .odin.v1.AudioData audio = 1 [json_name = "audio"];
  bool has_audio() const;
  void clear_audio() ;
  const ::odin::v1::AudioData& audio() const;
  [[nodiscard]] ::odin::v1::AudioData* PROTOBUF_NULLABLE release_audio();
  ::odin::v1::AudioData* PROTOBUF_NONNULL mutable_audio();
  void set_allocated_audio(::odin::v1::AudioData* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_audio(::odin::v1::AudioData* PROTOBUF_NULLABLE value);
  ::odin::v1::AudioData* PROTOBUF_NULLABLE unsafe_arena_release_audio();

  private:
  const ::odin::v1::AudioData& _internal_audio() const;
  ::odin::v1::AudioData* PROTOBUF_NONNULL _internal_mutable_audio();

  public:
  // .odin.v1.SessionInfo session = 2 [json_name = "session"];
  bool has_session() const;
  void clear_session() ;
  const ::odin::v1::SessionInfo& session() const;
  [[nodiscard]] ::odin::v1::SessionInfo* PROTOBUF_NULLABLE release_session();
  ::odin::v1::SessionInfo* PROTOBUF_NONNULL mutable_session();
  void set_allocated_session(::odin::v1::SessionInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_session(::odin::v1::SessionInfo* PROTOBUF_NULLABLE value);
  ::odin::v1::SessionInfo* PROTOBUF_NULLABLE unsafe_arena_release_session();

  private:
  const ::odin::v1::SessionInfo& _internal_session() const;
  ::odin::v1::SessionInfo* PROTOBUF_NONNULL _internal_mutable_session();

  public:
  // @@protoc_insertion_point(class_scope:odin.v1.AudioInputChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const AudioInputChunk& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::odin::v1::AudioData* PROTOBUF_NULLABLE audio_;
    ::odin::v1::SessionInfo* PROTOBUF_NULLABLE session_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odin_2fv1_2faudio_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull AudioInputChunk_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AudioInputChunk

// .odin.v1.AudioData audio = 1 [json_name = "audio"];
inline bool AudioInputChunk::has_audio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_ != nullptr);
  return value;
}
inline const ::odin::v1::AudioData& AudioInputChunk::_internal_audio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::odin::v1::AudioData* p = _impl_.audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::odin::v1::AudioData&>(::odin::v1::_AudioData_default_instance_);
}
inline const ::odin::v1::AudioData& AudioInputChunk::audio() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odin.v1.AudioInputChunk.audio)
  return _internal_audio();
}
inline void AudioInputChunk::unsafe_arena_set_allocated_audio(
    ::odin::v1::AudioData* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_);
  }
  _impl_.audio_ = reinterpret_cast<::odin::v1::AudioData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:odin.v1.AudioInputChunk.audio)
}
inline ::odin::v1::AudioData* PROTOBUF_NULLABLE AudioInputChunk::release_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::odin::v1::AudioData* released = _impl_.audio_;
  _impl_.audio_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::odin::v1::AudioData* PROTOBUF_NULLABLE AudioInputChunk::unsafe_arena_release_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odin.v1.AudioInputChunk.audio)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::odin::v1::AudioData* temp = _impl_.audio_;
  _impl_.audio_ = nullptr;
  return temp;
}
inline ::odin::v1::AudioData* PROTOBUF_NONNULL AudioInputChunk::_internal_mutable_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.audio_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::odin::v1::AudioData>(GetArena());
    _impl_.audio_ = reinterpret_cast<::odin::v1::AudioData*>(p);
  }
  return _impl_.audio_;
}
inline ::odin::v1::AudioData* PROTOBUF_NONNULL AudioInputChunk::mutable_audio()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::odin::v1::AudioData* _msg = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:odin.v1.AudioInputChunk.audio)
  return _msg;
}
inline void AudioInputChunk::set_allocated_audio(::odin::v1::AudioData* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.audio_ = reinterpret_cast<::odin::v1::AudioData*>(value);
  // @@protoc_insertion_point(field_set_allocated:odin.v1.AudioInputChunk.audio)
}

// .odin.v1.SessionInfo session = 2 [json_name = "session"];
inline bool AudioInputChunk::has_session() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.session_ != nullptr);
  return value;
}
inline const ::odin::v1::SessionInfo& AudioInputChunk::_internal_session() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::odin::v1::SessionInfo* p = _impl_.session_;
  return p != nullptr ? *p : reinterpret_cast<const ::odin::v1::SessionInfo&>(::odin::v1::_SessionInfo_default_instance_);
}
inline const ::odin::v1::SessionInfo& AudioInputChunk::session() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odin.v1.AudioInputChunk.session)
  return _internal_session();
}
inline void AudioInputChunk::unsafe_arena_set_allocated_session(
    ::odin::v1::SessionInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.session_);
  }
  _impl_.session_ = reinterpret_cast<::odin::v1::SessionInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:odin.v1.AudioInputChunk.session)
}
inline ::odin::v1::SessionInfo* PROTOBUF_NULLABLE AudioInputChunk::release_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::odin::v1::SessionInfo* released = _impl_.session_;
  _impl_.session_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::odin::v1::SessionInfo* PROTOBUF_NULLABLE AudioInputChunk::unsafe_arena_release_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odin.v1.AudioInputChunk.session)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::odin::v1::SessionInfo* temp = _impl_.session_;
  _impl_.session_ = nullptr;
  return temp;
}
inline ::odin::v1::SessionInfo* PROTOBUF_NONNULL AudioInputChunk::_internal_mutable_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.session_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::odin::v1::SessionInfo>(GetArena());
    _impl_.session_ = reinterpret_cast<::odin::v1::SessionInfo*>(p);
  }
  return _impl_.session_;
}
inline ::odin::v1::SessionInfo* PROTOBUF_NONNULL AudioInputChunk::mutable_session()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::odin::v1::SessionInfo* _msg = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:odin.v1.AudioInputChunk.session)
  return _msg;
}
inline void AudioInputChunk::set_allocated_session(::odin::v1::SessionInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.session_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.session_ = reinterpret_cast<::odin::v1::SessionInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:odin.v1.AudioInputChunk.session)
}

// -------------------------------------------------------------------

// AudioOutputSpeech

// .odin.v1.AudioData audio = 1 [json_name = "audio"];
inline bool AudioOutputSpeech::has_audio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_ != nullptr);
  return value;
}
inline const ::odin::v1::AudioData& AudioOutputSpeech::_internal_audio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::odin::v1::AudioData* p = _impl_.audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::odin::v1::AudioData&>(::odin::v1::_AudioData_default_instance_);
}
inline const ::odin::v1::AudioData& AudioOutputSpeech::audio() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odin.v1.AudioOutputSpeech.audio)
  return _internal_audio();
}
inline void AudioOutputSpeech::unsafe_arena_set_allocated_audio(
    ::odin::v1::AudioData* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_);
  }
  _impl_.audio_ = reinterpret_cast<::odin::v1::AudioData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:odin.v1.AudioOutputSpeech.audio)
}
inline ::odin::v1::AudioData* PROTOBUF_NULLABLE AudioOutputSpeech::release_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::odin::v1::AudioData* released = _impl_.audio_;
  _impl_.audio_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::odin::v1::AudioData* PROTOBUF_NULLABLE AudioOutputSpeech::unsafe_arena_release_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odin.v1.AudioOutputSpeech.audio)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::odin::v1::AudioData* temp = _impl_.audio_;
  _impl_.audio_ = nullptr;
  return temp;
}
inline ::odin::v1::AudioData* PROTOBUF_NONNULL AudioOutputSpeech::_internal_mutable_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.audio_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::odin::v1::AudioData>(GetArena());
    _impl_.audio_ = reinterpret_cast<::odin::v1::AudioData*>(p);
  }
  return _impl_.audio_;
}
inline ::odin::v1::AudioData* PROTOBUF_NONNULL AudioOutputSpeech::mutable_audio()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::odin::v1::AudioData* _msg = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:odin.v1.AudioOutputSpeech.audio)
  return _msg;
}
inline void AudioOutputSpeech::set_allocated_audio(::odin::v1::AudioData* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.audio_ = reinterpret_cast<::odin::v1::AudioData*>(value);
  // @@protoc_insertion_point(field_set_allocated:odin.v1.AudioOutputSpeech.audio)
}

// .odin.v1.SessionInfo session = 2 [json_name = "session"];
inline bool AudioOutputSpeech::has_session() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.session_ != nullptr);
  return value;
}
inline const ::odin::v1::SessionInfo& AudioOutputSpeech::_internal_session() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::odin::v1::SessionInfo* p = _impl_.session_;
  return p != nullptr ? *p : reinterpret_cast<const ::odin::v1::SessionInfo&>(::odin::v1::_SessionInfo_default_instance_);
}
inline const ::odin::v1::SessionInfo& AudioOutputSpeech::session() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odin.v1.AudioOutputSpeech.session)
  return _internal_session();
}
inline void AudioOutputSpeech::unsafe_arena_set_allocated_session(
    ::odin::v1::SessionInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.session_);
  }
  _impl_.session_ = reinterpret_cast<::odin::v1::SessionInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:odin.v1.AudioOutputSpeech.session)
}
inline ::odin::v1::SessionInfo* PROTOBUF_NULLABLE AudioOutputSpeech::release_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::odin::v1::SessionInfo* released = _impl_.session_;
  _impl_.session_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::odin::v1::SessionInfo* PROTOBUF_NULLABLE AudioOutputSpeech::unsafe_arena_release_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odin.v1.AudioOutputSpeech.session)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::odin::v1::SessionInfo* temp = _impl_.session_;
  _impl_.session_ = nullptr;
  return temp;
}
inline ::odin::v1::SessionInfo* PROTOBUF_NONNULL AudioOutputSpeech::_internal_mutable_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.session_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::odin::v1::SessionInfo>(GetArena());
    _impl_.session_ = reinterpret_cast<::odin::v1::SessionInfo*>(p);
  }
  return _impl_.session_;
}
inline ::odin::v1::SessionInfo* PROTOBUF_NONNULL AudioOutputSpeech::mutable_session()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::odin::v1::SessionInfo* _msg = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:odin.v1.AudioOutputSpeech.session)
  return _msg;
}
inline void AudioOutputSpeech::set_allocated_session(::odin::v1::SessionInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.session_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.session_ = reinterpret_cast<::odin::v1::SessionInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:odin.v1.AudioOutputSpeech.session)
}

// -------------------------------------------------------------------

// AudioOutputVisualization

// repeated float audio_levels = 1 [json_name = "audioLevels"];
inline int AudioOutputVisualization::_internal_audio_levels_size() const {
  return _internal_audio_levels().size();
}
inline int AudioOutputVisualization::audio_levels_size() const {
  return _internal_audio_levels_size();
}
inline void AudioOutputVisualization::clear_audio_levels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_levels_.Clear();
}
inline float AudioOutputVisualization::audio_levels(int index) const {
  // @@protoc_insertion_point(field_get:odin.v1.AudioOutputVisualization.audio_levels)
  return _internal_audio_levels().Get(index);
}
inline void AudioOutputVisualization::set_audio_levels(int index, float value) {
  _internal_mutable_audio_levels()->Set(index, value);
  // @@protoc_insertion_point(field_set:odin.v1.AudioOutputVisualization.audio_levels)
}
inline void AudioOutputVisualization::add_audio_levels(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_audio_levels()->Add(value);
  // @@protoc_insertion_point(field_add:odin.v1.AudioOutputVisualization.audio_levels)
}
inline const ::google::protobuf::RepeatedField<float>& AudioOutputVisualization::audio_levels() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:odin.v1.AudioOutputVisualization.audio_levels)
  return _internal_audio_levels();
}
inline ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL AudioOutputVisualization::mutable_audio_levels()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:odin.v1.AudioOutputVisualization.audio_levels)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_audio_levels();
}
inline const ::google::protobuf::RepeatedField<float>&
AudioOutputVisualization::_internal_audio_levels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audio_levels_;
}
inline ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL
AudioOutputVisualization::_internal_mutable_audio_levels() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.audio_levels_;
}

// .odin.v1.SessionInfo session = 2 [json_name = "session"];
inline bool AudioOutputVisualization::has_session() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.session_ != nullptr);
  return value;
}
inline const ::odin::v1::SessionInfo& AudioOutputVisualization::_internal_session() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::odin::v1::SessionInfo* p = _impl_.session_;
  return p != nullptr ? *p : reinterpret_cast<const ::odin::v1::SessionInfo&>(::odin::v1::_SessionInfo_default_instance_);
}
inline const ::odin::v1::SessionInfo& AudioOutputVisualization::session() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odin.v1.AudioOutputVisualization.session)
  return _internal_session();
}
inline void AudioOutputVisualization::unsafe_arena_set_allocated_session(
    ::odin::v1::SessionInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.session_);
  }
  _impl_.session_ = reinterpret_cast<::odin::v1::SessionInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:odin.v1.AudioOutputVisualization.session)
}
inline ::odin::v1::SessionInfo* PROTOBUF_NULLABLE AudioOutputVisualization::release_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::odin::v1::SessionInfo* released = _impl_.session_;
  _impl_.session_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::odin::v1::SessionInfo* PROTOBUF_NULLABLE AudioOutputVisualization::unsafe_arena_release_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odin.v1.AudioOutputVisualization.session)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::odin::v1::SessionInfo* temp = _impl_.session_;
  _impl_.session_ = nullptr;
  return temp;
}
inline ::odin::v1::SessionInfo* PROTOBUF_NONNULL AudioOutputVisualization::_internal_mutable_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.session_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::odin::v1::SessionInfo>(GetArena());
    _impl_.session_ = reinterpret_cast<::odin::v1::SessionInfo*>(p);
  }
  return _impl_.session_;
}
inline ::odin::v1::SessionInfo* PROTOBUF_NONNULL AudioOutputVisualization::mutable_session()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::odin::v1::SessionInfo* _msg = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:odin.v1.AudioOutputVisualization.session)
  return _msg;
}
inline void AudioOutputVisualization::set_allocated_session(::odin::v1::SessionInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.session_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.session_ = reinterpret_cast<::odin::v1::SessionInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:odin.v1.AudioOutputVisualization.session)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace odin


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // odin_2fv1_2faudio_2eproto_2epb_2eh
