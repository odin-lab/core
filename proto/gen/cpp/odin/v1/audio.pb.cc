// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: odin/v1/audio.proto
// Protobuf C++ Version: 6.31.1

#include "odin/v1/audio.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace odin {
namespace v1 {

inline constexpr AudioOutputVisualization::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        audio_levels_{},
        session_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AudioOutputVisualization::AudioOutputVisualization(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AudioOutputVisualization_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AudioOutputVisualizationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioOutputVisualizationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioOutputVisualizationDefaultTypeInternal() {}
  union {
    AudioOutputVisualization _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioOutputVisualizationDefaultTypeInternal _AudioOutputVisualization_default_instance_;

inline constexpr AudioOutputSpeech::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        audio_{nullptr},
        session_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AudioOutputSpeech::AudioOutputSpeech(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AudioOutputSpeech_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AudioOutputSpeechDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioOutputSpeechDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioOutputSpeechDefaultTypeInternal() {}
  union {
    AudioOutputSpeech _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioOutputSpeechDefaultTypeInternal _AudioOutputSpeech_default_instance_;

inline constexpr AudioInputChunk::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        client_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        audio_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AudioInputChunk::AudioInputChunk(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AudioInputChunk_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AudioInputChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioInputChunkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioInputChunkDefaultTypeInternal() {}
  union {
    AudioInputChunk _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioInputChunkDefaultTypeInternal _AudioInputChunk_default_instance_;
}  // namespace v1
}  // namespace odin
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_odin_2fv1_2faudio_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_odin_2fv1_2faudio_2eproto = nullptr;
const ::uint32_t
    TableStruct_odin_2fv1_2faudio_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioInputChunk, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioInputChunk, _impl_.audio_),
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioInputChunk, _impl_.client_id_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioOutputSpeech, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioOutputSpeech, _impl_.audio_),
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioOutputSpeech, _impl_.session_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioOutputVisualization, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioOutputVisualization, _impl_.audio_levels_),
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioOutputVisualization, _impl_.session_),
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::odin::v1::AudioInputChunk)},
        {7, sizeof(::odin::v1::AudioOutputSpeech)},
        {14, sizeof(::odin::v1::AudioOutputVisualization)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::odin::v1::_AudioInputChunk_default_instance_._instance,
    &::odin::v1::_AudioOutputSpeech_default_instance_._instance,
    &::odin::v1::_AudioOutputVisualization_default_instance_._instance,
};
const char descriptor_table_protodef_odin_2fv1_2faudio_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\023odin/v1/audio.proto\022\007odin.v1\032\024odin/v1/"
    "common.proto\032\025odin/v1/options.proto\"s\n\017A"
    "udioInputChunk\022(\n\005audio\030\001 \001(\0132\022.odin.v1."
    "AudioDataR\005audio\022\033\n\tclient_id\030\002 \001(\tR\010cli"
    "entId:\031\212\265\030\021audio.input.chunk\220\265\030\001\"\212\001\n\021Aud"
    "ioOutputSpeech\022(\n\005audio\030\001 \001(\0132\022.odin.v1."
    "AudioDataR\005audio\022.\n\007session\030\002 \001(\0132\024.odin"
    ".v1.SessionInfoR\007session:\033\212\265\030\023audio.outp"
    "ut.speech\220\265\030\001\"\215\001\n\030AudioOutputVisualizati"
    "on\022!\n\014audio_levels\030\001 \003(\002R\013audioLevels\022.\n"
    "\007session\030\002 \001(\0132\024.odin.v1.SessionInfoR\007se"
    "ssion:\036\212\265\030\032audio.output.visualizationBV\n"
    "\013com.odin.v1B\nAudioProtoP\001\242\002\003OXX\252\002\007Odin."
    "V1\312\002\007Odin\\V1\342\002\023Odin\\V1\\GPBMetadata\352\002\010Odi"
    "n::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_odin_2fv1_2faudio_2eproto_deps[2] = {
        &::descriptor_table_odin_2fv1_2fcommon_2eproto,
        &::descriptor_table_odin_2fv1_2foptions_2eproto,
};
static ::absl::once_flag descriptor_table_odin_2fv1_2faudio_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_odin_2fv1_2faudio_2eproto = {
    false,
    false,
    573,
    descriptor_table_protodef_odin_2fv1_2faudio_2eproto,
    "odin/v1/audio.proto",
    &descriptor_table_odin_2fv1_2faudio_2eproto_once,
    descriptor_table_odin_2fv1_2faudio_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_odin_2fv1_2faudio_2eproto::offsets,
    file_level_enum_descriptors_odin_2fv1_2faudio_2eproto,
    file_level_service_descriptors_odin_2fv1_2faudio_2eproto,
};
namespace odin {
namespace v1 {
// ===================================================================

class AudioInputChunk::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AudioInputChunk>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AudioInputChunk, _impl_._has_bits_);
};

void AudioInputChunk::clear_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.audio_ != nullptr) _impl_.audio_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AudioInputChunk::AudioInputChunk(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AudioInputChunk_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:odin.v1.AudioInputChunk)
}
PROTOBUF_NDEBUG_INLINE AudioInputChunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::odin::v1::AudioInputChunk& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        client_id_(arena, from.client_id_) {}

AudioInputChunk::AudioInputChunk(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AudioInputChunk& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AudioInputChunk_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AudioInputChunk* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.audio_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:odin.v1.AudioInputChunk)
}
PROTOBUF_NDEBUG_INLINE AudioInputChunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        client_id_(arena) {}

inline void AudioInputChunk::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.audio_ = {};
}
AudioInputChunk::~AudioInputChunk() {
  // @@protoc_insertion_point(destructor:odin.v1.AudioInputChunk)
  SharedDtor(*this);
}
inline void AudioInputChunk::SharedDtor(MessageLite& self) {
  AudioInputChunk& this_ = static_cast<AudioInputChunk&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.client_id_.Destroy();
  delete this_._impl_.audio_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AudioInputChunk::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AudioInputChunk(arena);
}
constexpr auto AudioInputChunk::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AudioInputChunk),
                                            alignof(AudioInputChunk));
}
constexpr auto AudioInputChunk::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AudioInputChunk_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AudioInputChunk::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AudioInputChunk>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AudioInputChunk::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AudioInputChunk>(), &AudioInputChunk::ByteSizeLong,
              &AudioInputChunk::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AudioInputChunk, _impl_._cached_size_),
          false,
      },
      &AudioInputChunk::kDescriptorMethods,
      &descriptor_table_odin_2fv1_2faudio_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AudioInputChunk_class_data_ =
        AudioInputChunk::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AudioInputChunk::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AudioInputChunk_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AudioInputChunk_class_data_.tc_table);
  return AudioInputChunk_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 41, 2>
AudioInputChunk::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AudioInputChunk, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AudioInputChunk_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::odin::v1::AudioInputChunk>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string client_id = 2 [json_name = "clientId"];
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AudioInputChunk, _impl_.client_id_)}},
    // .odin.v1.AudioData audio = 1 [json_name = "audio"];
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(AudioInputChunk, _impl_.audio_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .odin.v1.AudioData audio = 1 [json_name = "audio"];
    {PROTOBUF_FIELD_OFFSET(AudioInputChunk, _impl_.audio_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string client_id = 2 [json_name = "clientId"];
    {PROTOBUF_FIELD_OFFSET(AudioInputChunk, _impl_.client_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::odin::v1::AudioData>()},
  }},
  {{
    "\27\0\11\0\0\0\0\0"
    "odin.v1.AudioInputChunk"
    "client_id"
  }},
};
PROTOBUF_NOINLINE void AudioInputChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:odin.v1.AudioInputChunk)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.client_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.audio_ != nullptr);
      _impl_.audio_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AudioInputChunk::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AudioInputChunk& this_ = static_cast<const AudioInputChunk&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AudioInputChunk::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AudioInputChunk& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:odin.v1.AudioInputChunk)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .odin.v1.AudioData audio = 1 [json_name = "audio"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.audio_, this_._impl_.audio_->GetCachedSize(), target,
        stream);
  }

  // string client_id = 2 [json_name = "clientId"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!this_._internal_client_id().empty()) {
      const ::std::string& _s = this_._internal_client_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "odin.v1.AudioInputChunk.client_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odin.v1.AudioInputChunk)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AudioInputChunk::ByteSizeLong(const MessageLite& base) {
  const AudioInputChunk& this_ = static_cast<const AudioInputChunk&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AudioInputChunk::ByteSizeLong() const {
  const AudioInputChunk& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:odin.v1.AudioInputChunk)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string client_id = 2 [json_name = "clientId"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_client_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_client_id());
      }
    }
    // .odin.v1.AudioData audio = 1 [json_name = "audio"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.audio_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AudioInputChunk::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AudioInputChunk*>(&to_msg);
  auto& from = static_cast<const AudioInputChunk&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:odin.v1.AudioInputChunk)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_client_id().empty()) {
        _this->_internal_set_client_id(from._internal_client_id());
      } else {
        if (_this->_impl_.client_id_.IsDefault()) {
          _this->_internal_set_client_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.audio_ != nullptr);
      if (_this->_impl_.audio_ == nullptr) {
        _this->_impl_.audio_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_);
      } else {
        _this->_impl_.audio_->MergeFrom(*from._impl_.audio_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AudioInputChunk::CopyFrom(const AudioInputChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odin.v1.AudioInputChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AudioInputChunk::InternalSwap(AudioInputChunk* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, &other->_impl_.client_id_, arena);
  swap(_impl_.audio_, other->_impl_.audio_);
}

::google::protobuf::Metadata AudioInputChunk::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AudioOutputSpeech::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AudioOutputSpeech>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AudioOutputSpeech, _impl_._has_bits_);
};

void AudioOutputSpeech::clear_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.audio_ != nullptr) _impl_.audio_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AudioOutputSpeech::clear_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.session_ != nullptr) _impl_.session_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AudioOutputSpeech::AudioOutputSpeech(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AudioOutputSpeech_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:odin.v1.AudioOutputSpeech)
}
PROTOBUF_NDEBUG_INLINE AudioOutputSpeech::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::odin::v1::AudioOutputSpeech& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AudioOutputSpeech::AudioOutputSpeech(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AudioOutputSpeech& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AudioOutputSpeech_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AudioOutputSpeech* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.audio_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_)
                : nullptr;
  _impl_.session_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.session_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:odin.v1.AudioOutputSpeech)
}
PROTOBUF_NDEBUG_INLINE AudioOutputSpeech::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void AudioOutputSpeech::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, audio_),
           0,
           offsetof(Impl_, session_) -
               offsetof(Impl_, audio_) +
               sizeof(Impl_::session_));
}
AudioOutputSpeech::~AudioOutputSpeech() {
  // @@protoc_insertion_point(destructor:odin.v1.AudioOutputSpeech)
  SharedDtor(*this);
}
inline void AudioOutputSpeech::SharedDtor(MessageLite& self) {
  AudioOutputSpeech& this_ = static_cast<AudioOutputSpeech&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.audio_;
  delete this_._impl_.session_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AudioOutputSpeech::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AudioOutputSpeech(arena);
}
constexpr auto AudioOutputSpeech::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AudioOutputSpeech),
                                            alignof(AudioOutputSpeech));
}
constexpr auto AudioOutputSpeech::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AudioOutputSpeech_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AudioOutputSpeech::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AudioOutputSpeech>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AudioOutputSpeech::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AudioOutputSpeech>(), &AudioOutputSpeech::ByteSizeLong,
              &AudioOutputSpeech::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AudioOutputSpeech, _impl_._cached_size_),
          false,
      },
      &AudioOutputSpeech::kDescriptorMethods,
      &descriptor_table_odin_2fv1_2faudio_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AudioOutputSpeech_class_data_ =
        AudioOutputSpeech::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AudioOutputSpeech::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AudioOutputSpeech_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AudioOutputSpeech_class_data_.tc_table);
  return AudioOutputSpeech_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
AudioOutputSpeech::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AudioOutputSpeech, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AudioOutputSpeech_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::odin::v1::AudioOutputSpeech>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .odin.v1.SessionInfo session = 2 [json_name = "session"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AudioOutputSpeech, _impl_.session_)}},
    // .odin.v1.AudioData audio = 1 [json_name = "audio"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AudioOutputSpeech, _impl_.audio_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .odin.v1.AudioData audio = 1 [json_name = "audio"];
    {PROTOBUF_FIELD_OFFSET(AudioOutputSpeech, _impl_.audio_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .odin.v1.SessionInfo session = 2 [json_name = "session"];
    {PROTOBUF_FIELD_OFFSET(AudioOutputSpeech, _impl_.session_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::odin::v1::AudioData>()},
      {::_pbi::TcParser::GetTable<::odin::v1::SessionInfo>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void AudioOutputSpeech::Clear() {
// @@protoc_insertion_point(message_clear_start:odin.v1.AudioOutputSpeech)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.audio_ != nullptr);
      _impl_.audio_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.session_ != nullptr);
      _impl_.session_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AudioOutputSpeech::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AudioOutputSpeech& this_ = static_cast<const AudioOutputSpeech&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AudioOutputSpeech::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AudioOutputSpeech& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:odin.v1.AudioOutputSpeech)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .odin.v1.AudioData audio = 1 [json_name = "audio"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.audio_, this_._impl_.audio_->GetCachedSize(), target,
        stream);
  }

  // .odin.v1.SessionInfo session = 2 [json_name = "session"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.session_, this_._impl_.session_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odin.v1.AudioOutputSpeech)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AudioOutputSpeech::ByteSizeLong(const MessageLite& base) {
  const AudioOutputSpeech& this_ = static_cast<const AudioOutputSpeech&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AudioOutputSpeech::ByteSizeLong() const {
  const AudioOutputSpeech& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:odin.v1.AudioOutputSpeech)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .odin.v1.AudioData audio = 1 [json_name = "audio"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.audio_);
    }
    // .odin.v1.SessionInfo session = 2 [json_name = "session"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.session_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AudioOutputSpeech::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AudioOutputSpeech*>(&to_msg);
  auto& from = static_cast<const AudioOutputSpeech&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:odin.v1.AudioOutputSpeech)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.audio_ != nullptr);
      if (_this->_impl_.audio_ == nullptr) {
        _this->_impl_.audio_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_);
      } else {
        _this->_impl_.audio_->MergeFrom(*from._impl_.audio_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.session_ != nullptr);
      if (_this->_impl_.session_ == nullptr) {
        _this->_impl_.session_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.session_);
      } else {
        _this->_impl_.session_->MergeFrom(*from._impl_.session_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AudioOutputSpeech::CopyFrom(const AudioOutputSpeech& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odin.v1.AudioOutputSpeech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AudioOutputSpeech::InternalSwap(AudioOutputSpeech* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioOutputSpeech, _impl_.session_)
      + sizeof(AudioOutputSpeech::_impl_.session_)
      - PROTOBUF_FIELD_OFFSET(AudioOutputSpeech, _impl_.audio_)>(
          reinterpret_cast<char*>(&_impl_.audio_),
          reinterpret_cast<char*>(&other->_impl_.audio_));
}

::google::protobuf::Metadata AudioOutputSpeech::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AudioOutputVisualization::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AudioOutputVisualization>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AudioOutputVisualization, _impl_._has_bits_);
};

void AudioOutputVisualization::clear_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.session_ != nullptr) _impl_.session_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AudioOutputVisualization::AudioOutputVisualization(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AudioOutputVisualization_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:odin.v1.AudioOutputVisualization)
}
PROTOBUF_NDEBUG_INLINE AudioOutputVisualization::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::odin::v1::AudioOutputVisualization& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        audio_levels_{visibility, arena, from.audio_levels_} {}

AudioOutputVisualization::AudioOutputVisualization(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AudioOutputVisualization& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AudioOutputVisualization_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AudioOutputVisualization* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.session_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.session_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:odin.v1.AudioOutputVisualization)
}
PROTOBUF_NDEBUG_INLINE AudioOutputVisualization::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        audio_levels_{visibility, arena} {}

inline void AudioOutputVisualization::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.session_ = {};
}
AudioOutputVisualization::~AudioOutputVisualization() {
  // @@protoc_insertion_point(destructor:odin.v1.AudioOutputVisualization)
  SharedDtor(*this);
}
inline void AudioOutputVisualization::SharedDtor(MessageLite& self) {
  AudioOutputVisualization& this_ = static_cast<AudioOutputVisualization&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.session_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AudioOutputVisualization::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AudioOutputVisualization(arena);
}
constexpr auto AudioOutputVisualization::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AudioOutputVisualization, _impl_.audio_levels_) +
          decltype(AudioOutputVisualization::_impl_.audio_levels_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(AudioOutputVisualization), alignof(AudioOutputVisualization), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AudioOutputVisualization::PlacementNew_,
                                 sizeof(AudioOutputVisualization),
                                 alignof(AudioOutputVisualization));
  }
}
constexpr auto AudioOutputVisualization::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AudioOutputVisualization_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AudioOutputVisualization::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AudioOutputVisualization>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AudioOutputVisualization::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AudioOutputVisualization>(), &AudioOutputVisualization::ByteSizeLong,
              &AudioOutputVisualization::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AudioOutputVisualization, _impl_._cached_size_),
          false,
      },
      &AudioOutputVisualization::kDescriptorMethods,
      &descriptor_table_odin_2fv1_2faudio_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AudioOutputVisualization_class_data_ =
        AudioOutputVisualization::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AudioOutputVisualization::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AudioOutputVisualization_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AudioOutputVisualization_class_data_.tc_table);
  return AudioOutputVisualization_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
AudioOutputVisualization::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AudioOutputVisualization, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AudioOutputVisualization_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::odin::v1::AudioOutputVisualization>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .odin.v1.SessionInfo session = 2 [json_name = "session"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AudioOutputVisualization, _impl_.session_)}},
    // repeated float audio_levels = 1 [json_name = "audioLevels"];
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AudioOutputVisualization, _impl_.audio_levels_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float audio_levels = 1 [json_name = "audioLevels"];
    {PROTOBUF_FIELD_OFFSET(AudioOutputVisualization, _impl_.audio_levels_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .odin.v1.SessionInfo session = 2 [json_name = "session"];
    {PROTOBUF_FIELD_OFFSET(AudioOutputVisualization, _impl_.session_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::odin::v1::SessionInfo>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void AudioOutputVisualization::Clear() {
// @@protoc_insertion_point(message_clear_start:odin.v1.AudioOutputVisualization)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audio_levels_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.session_ != nullptr);
    _impl_.session_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AudioOutputVisualization::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AudioOutputVisualization& this_ = static_cast<const AudioOutputVisualization&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AudioOutputVisualization::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AudioOutputVisualization& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:odin.v1.AudioOutputVisualization)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float audio_levels = 1 [json_name = "audioLevels"];
  if (this_._internal_audio_levels_size() > 0) {
    target = stream->WriteFixedPacked(1, this_._internal_audio_levels(), target);
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .odin.v1.SessionInfo session = 2 [json_name = "session"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.session_, this_._impl_.session_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odin.v1.AudioOutputVisualization)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AudioOutputVisualization::ByteSizeLong(const MessageLite& base) {
  const AudioOutputVisualization& this_ = static_cast<const AudioOutputVisualization&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AudioOutputVisualization::ByteSizeLong() const {
  const AudioOutputVisualization& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:odin.v1.AudioOutputVisualization)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated float audio_levels = 1 [json_name = "audioLevels"];
    {
      ::size_t data_size = ::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_audio_levels_size());
      ::size_t tag_size = data_size == 0
          ? 0
          : 1 + ::_pbi::WireFormatLite::Int32Size(
                              static_cast<::int32_t>(data_size));
      total_size += tag_size + data_size;
    }
  }
   {
    // .odin.v1.SessionInfo session = 2 [json_name = "session"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.session_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AudioOutputVisualization::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AudioOutputVisualization*>(&to_msg);
  auto& from = static_cast<const AudioOutputVisualization&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:odin.v1.AudioOutputVisualization)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_audio_levels()->MergeFrom(from._internal_audio_levels());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.session_ != nullptr);
    if (_this->_impl_.session_ == nullptr) {
      _this->_impl_.session_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.session_);
    } else {
      _this->_impl_.session_->MergeFrom(*from._impl_.session_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AudioOutputVisualization::CopyFrom(const AudioOutputVisualization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odin.v1.AudioOutputVisualization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AudioOutputVisualization::InternalSwap(AudioOutputVisualization* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.audio_levels_.InternalSwap(&other->_impl_.audio_levels_);
  swap(_impl_.session_, other->_impl_.session_);
}

::google::protobuf::Metadata AudioOutputVisualization::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace odin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_odin_2fv1_2faudio_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
