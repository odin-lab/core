// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: odin/v1/audio.proto
// Protobuf C++ Version: 6.31.1

#include "odin/v1/audio.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace odin {
namespace v1 {

inline constexpr AudioBufferSpeaker::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        audio_{nullptr},
        info_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AudioBufferSpeaker::AudioBufferSpeaker(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AudioBufferSpeaker_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AudioBufferSpeakerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioBufferSpeakerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioBufferSpeakerDefaultTypeInternal() {}
  union {
    AudioBufferSpeaker _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioBufferSpeakerDefaultTypeInternal _AudioBufferSpeaker_default_instance_;

inline constexpr AudioBufferMic::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        audio_{nullptr},
        info_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AudioBufferMic::AudioBufferMic(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AudioBufferMic_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AudioBufferMicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioBufferMicDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioBufferMicDefaultTypeInternal() {}
  union {
    AudioBufferMic _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioBufferMicDefaultTypeInternal _AudioBufferMic_default_instance_;
}  // namespace v1
}  // namespace odin
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_odin_2fv1_2faudio_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_odin_2fv1_2faudio_2eproto = nullptr;
const ::uint32_t
    TableStruct_odin_2fv1_2faudio_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioBufferMic, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioBufferMic, _impl_.audio_),
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioBufferMic, _impl_.info_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioBufferSpeaker, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioBufferSpeaker, _impl_.audio_),
        PROTOBUF_FIELD_OFFSET(::odin::v1::AudioBufferSpeaker, _impl_.info_),
        0,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::odin::v1::AudioBufferMic)},
        {7, sizeof(::odin::v1::AudioBufferSpeaker)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::odin::v1::_AudioBufferMic_default_instance_._instance,
    &::odin::v1::_AudioBufferSpeaker_default_instance_._instance,
};
const char descriptor_table_protodef_odin_2fv1_2faudio_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\023odin/v1/audio.proto\022\007odin.v1\032\024odin/v1/"
    "common.proto\032\025odin/v1/options.proto\"\220\001\n\016"
    "AudioBufferMic\022(\n\005audio\030\001 \001(\0132\022.odin.v1."
    "AudioDataR\005audio\022(\n\004info\030\002 \001(\0132\024.odin.v1"
    ".MessageInfoR\004info:*\212\265\030&audio.{session_i"
    "d}.{instance_id}.input\"\225\001\n\022AudioBufferSp"
    "eaker\022(\n\005audio\030\001 \001(\0132\022.odin.v1.AudioData"
    "R\005audio\022(\n\004info\030\002 \001(\0132\024.odin.v1.MessageI"
    "nfoR\004info:+\212\265\030\'audio.{session_id}.{insta"
    "nce_id}.outputBV\n\013com.odin.v1B\nAudioProt"
    "oP\001\242\002\003OXX\252\002\007Odin.V1\312\002\007Odin\\V1\342\002\023Odin\\V1\\"
    "GPBMetadata\352\002\010Odin::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_odin_2fv1_2faudio_2eproto_deps[2] = {
        &::descriptor_table_odin_2fv1_2fcommon_2eproto,
        &::descriptor_table_odin_2fv1_2foptions_2eproto,
};
static ::absl::once_flag descriptor_table_odin_2fv1_2faudio_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_odin_2fv1_2faudio_2eproto = {
    false,
    false,
    470,
    descriptor_table_protodef_odin_2fv1_2faudio_2eproto,
    "odin/v1/audio.proto",
    &descriptor_table_odin_2fv1_2faudio_2eproto_once,
    descriptor_table_odin_2fv1_2faudio_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_odin_2fv1_2faudio_2eproto::offsets,
    file_level_enum_descriptors_odin_2fv1_2faudio_2eproto,
    file_level_service_descriptors_odin_2fv1_2faudio_2eproto,
};
namespace odin {
namespace v1 {
// ===================================================================

class AudioBufferMic::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AudioBufferMic>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AudioBufferMic, _impl_._has_bits_);
};

void AudioBufferMic::clear_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.audio_ != nullptr) _impl_.audio_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AudioBufferMic::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AudioBufferMic::AudioBufferMic(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AudioBufferMic_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:odin.v1.AudioBufferMic)
}
PROTOBUF_NDEBUG_INLINE AudioBufferMic::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::odin::v1::AudioBufferMic& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AudioBufferMic::AudioBufferMic(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AudioBufferMic& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AudioBufferMic_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AudioBufferMic* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.audio_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_)
                : nullptr;
  _impl_.info_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.info_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:odin.v1.AudioBufferMic)
}
PROTOBUF_NDEBUG_INLINE AudioBufferMic::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void AudioBufferMic::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, audio_),
           0,
           offsetof(Impl_, info_) -
               offsetof(Impl_, audio_) +
               sizeof(Impl_::info_));
}
AudioBufferMic::~AudioBufferMic() {
  // @@protoc_insertion_point(destructor:odin.v1.AudioBufferMic)
  SharedDtor(*this);
}
inline void AudioBufferMic::SharedDtor(MessageLite& self) {
  AudioBufferMic& this_ = static_cast<AudioBufferMic&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.audio_;
  delete this_._impl_.info_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AudioBufferMic::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AudioBufferMic(arena);
}
constexpr auto AudioBufferMic::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AudioBufferMic),
                                            alignof(AudioBufferMic));
}
constexpr auto AudioBufferMic::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AudioBufferMic_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AudioBufferMic::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AudioBufferMic>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AudioBufferMic::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AudioBufferMic>(), &AudioBufferMic::ByteSizeLong,
              &AudioBufferMic::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AudioBufferMic, _impl_._cached_size_),
          false,
      },
      &AudioBufferMic::kDescriptorMethods,
      &descriptor_table_odin_2fv1_2faudio_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AudioBufferMic_class_data_ =
        AudioBufferMic::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AudioBufferMic::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AudioBufferMic_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AudioBufferMic_class_data_.tc_table);
  return AudioBufferMic_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
AudioBufferMic::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AudioBufferMic, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AudioBufferMic_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::odin::v1::AudioBufferMic>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .odin.v1.MessageInfo info = 2 [json_name = "info"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AudioBufferMic, _impl_.info_)}},
    // .odin.v1.AudioData audio = 1 [json_name = "audio"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AudioBufferMic, _impl_.audio_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .odin.v1.AudioData audio = 1 [json_name = "audio"];
    {PROTOBUF_FIELD_OFFSET(AudioBufferMic, _impl_.audio_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .odin.v1.MessageInfo info = 2 [json_name = "info"];
    {PROTOBUF_FIELD_OFFSET(AudioBufferMic, _impl_.info_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::odin::v1::AudioData>()},
      {::_pbi::TcParser::GetTable<::odin::v1::MessageInfo>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void AudioBufferMic::Clear() {
// @@protoc_insertion_point(message_clear_start:odin.v1.AudioBufferMic)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.audio_ != nullptr);
      _impl_.audio_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AudioBufferMic::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AudioBufferMic& this_ = static_cast<const AudioBufferMic&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AudioBufferMic::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AudioBufferMic& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:odin.v1.AudioBufferMic)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .odin.v1.AudioData audio = 1 [json_name = "audio"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.audio_, this_._impl_.audio_->GetCachedSize(), target,
        stream);
  }

  // .odin.v1.MessageInfo info = 2 [json_name = "info"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.info_, this_._impl_.info_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odin.v1.AudioBufferMic)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AudioBufferMic::ByteSizeLong(const MessageLite& base) {
  const AudioBufferMic& this_ = static_cast<const AudioBufferMic&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AudioBufferMic::ByteSizeLong() const {
  const AudioBufferMic& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:odin.v1.AudioBufferMic)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .odin.v1.AudioData audio = 1 [json_name = "audio"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.audio_);
    }
    // .odin.v1.MessageInfo info = 2 [json_name = "info"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.info_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AudioBufferMic::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AudioBufferMic*>(&to_msg);
  auto& from = static_cast<const AudioBufferMic&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:odin.v1.AudioBufferMic)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.audio_ != nullptr);
      if (_this->_impl_.audio_ == nullptr) {
        _this->_impl_.audio_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_);
      } else {
        _this->_impl_.audio_->MergeFrom(*from._impl_.audio_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.info_ != nullptr);
      if (_this->_impl_.info_ == nullptr) {
        _this->_impl_.info_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.info_);
      } else {
        _this->_impl_.info_->MergeFrom(*from._impl_.info_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AudioBufferMic::CopyFrom(const AudioBufferMic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odin.v1.AudioBufferMic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AudioBufferMic::InternalSwap(AudioBufferMic* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioBufferMic, _impl_.info_)
      + sizeof(AudioBufferMic::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(AudioBufferMic, _impl_.audio_)>(
          reinterpret_cast<char*>(&_impl_.audio_),
          reinterpret_cast<char*>(&other->_impl_.audio_));
}

::google::protobuf::Metadata AudioBufferMic::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AudioBufferSpeaker::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AudioBufferSpeaker>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AudioBufferSpeaker, _impl_._has_bits_);
};

void AudioBufferSpeaker::clear_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.audio_ != nullptr) _impl_.audio_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AudioBufferSpeaker::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AudioBufferSpeaker::AudioBufferSpeaker(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AudioBufferSpeaker_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:odin.v1.AudioBufferSpeaker)
}
PROTOBUF_NDEBUG_INLINE AudioBufferSpeaker::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::odin::v1::AudioBufferSpeaker& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AudioBufferSpeaker::AudioBufferSpeaker(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AudioBufferSpeaker& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AudioBufferSpeaker_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AudioBufferSpeaker* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.audio_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_)
                : nullptr;
  _impl_.info_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.info_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:odin.v1.AudioBufferSpeaker)
}
PROTOBUF_NDEBUG_INLINE AudioBufferSpeaker::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void AudioBufferSpeaker::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, audio_),
           0,
           offsetof(Impl_, info_) -
               offsetof(Impl_, audio_) +
               sizeof(Impl_::info_));
}
AudioBufferSpeaker::~AudioBufferSpeaker() {
  // @@protoc_insertion_point(destructor:odin.v1.AudioBufferSpeaker)
  SharedDtor(*this);
}
inline void AudioBufferSpeaker::SharedDtor(MessageLite& self) {
  AudioBufferSpeaker& this_ = static_cast<AudioBufferSpeaker&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.audio_;
  delete this_._impl_.info_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AudioBufferSpeaker::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AudioBufferSpeaker(arena);
}
constexpr auto AudioBufferSpeaker::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AudioBufferSpeaker),
                                            alignof(AudioBufferSpeaker));
}
constexpr auto AudioBufferSpeaker::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AudioBufferSpeaker_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AudioBufferSpeaker::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AudioBufferSpeaker>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AudioBufferSpeaker::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AudioBufferSpeaker>(), &AudioBufferSpeaker::ByteSizeLong,
              &AudioBufferSpeaker::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AudioBufferSpeaker, _impl_._cached_size_),
          false,
      },
      &AudioBufferSpeaker::kDescriptorMethods,
      &descriptor_table_odin_2fv1_2faudio_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AudioBufferSpeaker_class_data_ =
        AudioBufferSpeaker::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AudioBufferSpeaker::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AudioBufferSpeaker_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AudioBufferSpeaker_class_data_.tc_table);
  return AudioBufferSpeaker_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
AudioBufferSpeaker::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AudioBufferSpeaker, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AudioBufferSpeaker_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::odin::v1::AudioBufferSpeaker>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .odin.v1.MessageInfo info = 2 [json_name = "info"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AudioBufferSpeaker, _impl_.info_)}},
    // .odin.v1.AudioData audio = 1 [json_name = "audio"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AudioBufferSpeaker, _impl_.audio_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .odin.v1.AudioData audio = 1 [json_name = "audio"];
    {PROTOBUF_FIELD_OFFSET(AudioBufferSpeaker, _impl_.audio_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .odin.v1.MessageInfo info = 2 [json_name = "info"];
    {PROTOBUF_FIELD_OFFSET(AudioBufferSpeaker, _impl_.info_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::odin::v1::AudioData>()},
      {::_pbi::TcParser::GetTable<::odin::v1::MessageInfo>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void AudioBufferSpeaker::Clear() {
// @@protoc_insertion_point(message_clear_start:odin.v1.AudioBufferSpeaker)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.audio_ != nullptr);
      _impl_.audio_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AudioBufferSpeaker::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AudioBufferSpeaker& this_ = static_cast<const AudioBufferSpeaker&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AudioBufferSpeaker::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AudioBufferSpeaker& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:odin.v1.AudioBufferSpeaker)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .odin.v1.AudioData audio = 1 [json_name = "audio"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.audio_, this_._impl_.audio_->GetCachedSize(), target,
        stream);
  }

  // .odin.v1.MessageInfo info = 2 [json_name = "info"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.info_, this_._impl_.info_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odin.v1.AudioBufferSpeaker)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AudioBufferSpeaker::ByteSizeLong(const MessageLite& base) {
  const AudioBufferSpeaker& this_ = static_cast<const AudioBufferSpeaker&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AudioBufferSpeaker::ByteSizeLong() const {
  const AudioBufferSpeaker& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:odin.v1.AudioBufferSpeaker)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .odin.v1.AudioData audio = 1 [json_name = "audio"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.audio_);
    }
    // .odin.v1.MessageInfo info = 2 [json_name = "info"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.info_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AudioBufferSpeaker::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AudioBufferSpeaker*>(&to_msg);
  auto& from = static_cast<const AudioBufferSpeaker&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:odin.v1.AudioBufferSpeaker)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.audio_ != nullptr);
      if (_this->_impl_.audio_ == nullptr) {
        _this->_impl_.audio_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_);
      } else {
        _this->_impl_.audio_->MergeFrom(*from._impl_.audio_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.info_ != nullptr);
      if (_this->_impl_.info_ == nullptr) {
        _this->_impl_.info_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.info_);
      } else {
        _this->_impl_.info_->MergeFrom(*from._impl_.info_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AudioBufferSpeaker::CopyFrom(const AudioBufferSpeaker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odin.v1.AudioBufferSpeaker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AudioBufferSpeaker::InternalSwap(AudioBufferSpeaker* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioBufferSpeaker, _impl_.info_)
      + sizeof(AudioBufferSpeaker::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(AudioBufferSpeaker, _impl_.audio_)>(
          reinterpret_cast<char*>(&_impl_.audio_),
          reinterpret_cast<char*>(&other->_impl_.audio_));
}

::google::protobuf::Metadata AudioBufferSpeaker::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace odin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_odin_2fv1_2faudio_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
