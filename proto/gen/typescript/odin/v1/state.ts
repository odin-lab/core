// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: odin/v1/state.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FileDescriptorProto as FileDescriptorProto1 } from "ts-proto-descriptors";
import { MessageInfo, protoMetadata as protoMetadata1 } from "./common";
import { protoMetadata as protoMetadata2 } from "./options";
import { protoMetadata as protoMetadata3 } from "./session";
import { protoMetadata as protoMetadata4 } from "./text_helper";

export const protobufPackage = "odin.v1";

export enum State {
  /** IDLE - idle mode (standy) */
  IDLE = "IDLE",
  /** AWAKE - awake mode (active -> implies listening */
  AWAKE = "AWAKE",
  /** THINKING - llm is working -> no audio out */
  THINKING = "THINKING",
  /** SPEAKING - text output is ready and converted to audio */
  SPEAKING = "SPEAKING",
  /** ON_HOLD - waiting state -> interrupted */
  ON_HOLD = "ON_HOLD",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function stateFromJSON(object: any): State {
  switch (object) {
    case 0:
    case "IDLE":
      return State.IDLE;
    case 1:
    case "AWAKE":
      return State.AWAKE;
    case 2:
    case "THINKING":
      return State.THINKING;
    case 3:
    case "SPEAKING":
      return State.SPEAKING;
    case 4:
    case "ON_HOLD":
      return State.ON_HOLD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return State.UNRECOGNIZED;
  }
}

export function stateToJSON(object: State): string {
  switch (object) {
    case State.IDLE:
      return "IDLE";
    case State.AWAKE:
      return "AWAKE";
    case State.THINKING:
      return "THINKING";
    case State.SPEAKING:
      return "SPEAKING";
    case State.ON_HOLD:
      return "ON_HOLD";
    case State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function stateToNumber(object: State): number {
  switch (object) {
    case State.IDLE:
      return 0;
    case State.AWAKE:
      return 1;
    case State.THINKING:
      return 2;
    case State.SPEAKING:
      return 3;
    case State.ON_HOLD:
      return 4;
    case State.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface StateUpdate {
  state: State;
  info: MessageInfo | undefined;
}

function createBaseStateUpdate(): StateUpdate {
  return { state: State.IDLE, info: undefined };
}

export const StateUpdate: MessageFns<StateUpdate> = {
  encode(message: StateUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== State.IDLE) {
      writer.uint32(8).int32(stateToNumber(message.state));
    }
    if (message.info !== undefined) {
      MessageInfo.encode(message.info, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StateUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStateUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.state = stateFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.info = MessageInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StateUpdate {
    return {
      state: isSet(object.state) ? stateFromJSON(object.state) : State.IDLE,
      info: isSet(object.info) ? MessageInfo.fromJSON(object.info) : undefined,
    };
  },

  toJSON(message: StateUpdate): unknown {
    const obj: any = {};
    if (message.state !== State.IDLE) {
      obj.state = stateToJSON(message.state);
    }
    if (message.info !== undefined) {
      obj.info = MessageInfo.toJSON(message.info);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StateUpdate>, I>>(base?: I): StateUpdate {
    return StateUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StateUpdate>, I>>(object: I): StateUpdate {
    const message = createBaseStateUpdate();
    message.state = object.state ?? State.IDLE;
    message.info = (object.info !== undefined && object.info !== null)
      ? MessageInfo.fromPartial(object.info)
      : undefined;
    return message;
  },
};

type ProtoMetaMessageOptions = {
  options?: { [key: string]: any };
  fields?: { [key: string]: { [key: string]: any } };
  oneof?: { [key: string]: { [key: string]: any } };
  nested?: { [key: string]: ProtoMetaMessageOptions };
};

export interface ProtoMetadata {
  fileDescriptor: FileDescriptorProto1;
  references: { [key: string]: any };
  dependencies?: ProtoMetadata[];
  options?: {
    options?: { [key: string]: any };
    services?: {
      [key: string]: { options?: { [key: string]: any }; methods?: { [key: string]: { [key: string]: any } } };
    };
    messages?: { [key: string]: ProtoMetaMessageOptions };
    enums?: { [key: string]: { options?: { [key: string]: any }; values?: { [key: string]: { [key: string]: any } } } };
  };
}

export const protoMetadata = {
  fileDescriptor: {
    "name": "odin/v1/state.proto",
    "package": "odin.v1",
    "dependency": [
      "odin/v1/common.proto",
      "odin/v1/options.proto",
      "odin/v1/session.proto",
      "odin/v1/text_helper.proto",
    ],
    "publicDependency": [],
    "weakDependency": [],
    "messageType": [{
      "name": "StateUpdate",
      "field": [{
        "name": "state",
        "number": 1,
        "label": 1,
        "type": 14,
        "typeName": ".odin.v1.State",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "state",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "info",
        "number": 2,
        "label": 1,
        "type": 11,
        "typeName": ".odin.v1.MessageInfo",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "info",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": {
        "messageSetWireFormat": false,
        "noStandardDescriptorAccessor": false,
        "deprecated": false,
        "mapEntry": false,
        "uninterpretedOption": [],
      },
      "reservedRange": [],
      "reservedName": [],
    }],
    "enumType": [{
      "name": "State",
      "value": [
        { "name": "IDLE", "number": 0, "options": undefined },
        { "name": "AWAKE", "number": 1, "options": undefined },
        { "name": "THINKING", "number": 2, "options": undefined },
        { "name": "SPEAKING", "number": 3, "options": undefined },
        { "name": "ON_HOLD", "number": 4, "options": undefined },
      ],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }],
    "service": [],
    "extension": [],
    "options": {
      "javaPackage": "com.odin.v1",
      "javaOuterClassname": "StateProto",
      "javaMultipleFiles": true,
      "javaGenerateEqualsAndHash": false,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": true,
      "objcClassPrefix": "OXX",
      "csharpNamespace": "Odin.V1",
      "swiftPrefix": "",
      "phpClassPrefix": "",
      "phpNamespace": "Odin\\V1",
      "phpMetadataNamespace": "Odin\\V1\\GPBMetadata",
      "rubyPackage": "Odin::V1",
      "uninterpretedOption": [],
    },
    "sourceCodeInfo": {
      "location": [{
        "path": [5, 0, 2, 0],
        "span": [12, 4, 13],
        "leadingComments": "",
        "trailingComments": " idle mode (standy)\n",
        "leadingDetachedComments": [],
      }, {
        "path": [5, 0, 2, 1],
        "span": [13, 4, 14],
        "leadingComments": "",
        "trailingComments": " awake mode (active -> implies listening\n",
        "leadingDetachedComments": [],
      }, {
        "path": [5, 0, 2, 2],
        "span": [14, 4, 17],
        "leadingComments": "",
        "trailingComments": " llm is working -> no audio out\n",
        "leadingDetachedComments": [],
      }, {
        "path": [5, 0, 2, 3],
        "span": [15, 4, 17],
        "leadingComments": "",
        "trailingComments": " text output is ready and converted to audio\n",
        "leadingDetachedComments": [],
      }, {
        "path": [5, 0, 2, 4],
        "span": [16, 4, 16],
        "leadingComments": "",
        "trailingComments": " waiting state -> interrupted\n",
        "leadingDetachedComments": [],
      }],
    },
    "syntax": "proto3",
  },
  references: { ".odin.v1.State": State, ".odin.v1.StateUpdate": StateUpdate },
  dependencies: [protoMetadata1, protoMetadata2, protoMetadata3, protoMetadata4],
  options: { messages: { "StateUpdate": { options: { "nats_subject": "state.{session_id}.{instance_id}.update" } } } },
} as const satisfies ProtoMetadata;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
