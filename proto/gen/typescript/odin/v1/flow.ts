// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: odin/v1/flow.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FileDescriptorProto as FileDescriptorProto1 } from "ts-proto-descriptors";
import { MessageInfo, protoMetadata as protoMetadata1 } from "./common";
import { protoMetadata as protoMetadata2 } from "./options";
import { protoMetadata as protoMetadata3 } from "./session";
import { protoMetadata as protoMetadata4, Segment } from "./text_helper";

export const protobufPackage = "odin.v1";

export enum FlowType {
  LLM = "LLM",
  SPEECH = "SPEECH",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function flowTypeFromJSON(object: any): FlowType {
  switch (object) {
    case 0:
    case "LLM":
      return FlowType.LLM;
    case 1:
    case "SPEECH":
      return FlowType.SPEECH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FlowType.UNRECOGNIZED;
  }
}

export function flowTypeToJSON(object: FlowType): string {
  switch (object) {
    case FlowType.LLM:
      return "LLM";
    case FlowType.SPEECH:
      return "SPEECH";
    case FlowType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function flowTypeToNumber(object: FlowType): number {
  switch (object) {
    case FlowType.LLM:
      return 0;
    case FlowType.SPEECH:
      return 1;
    case FlowType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface Start {
  flowType: FlowType;
  info: MessageInfo | undefined;
}

export interface Stop {
  flowType: FlowType;
  info: MessageInfo | undefined;
}

/** Flow information with role and content */
export interface TurnDetected {
  segments: Segment[];
  text: string;
  info: MessageInfo | undefined;
}

function createBaseStart(): Start {
  return { flowType: FlowType.LLM, info: undefined };
}

export const Start: MessageFns<Start> = {
  encode(message: Start, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.flowType !== FlowType.LLM) {
      writer.uint32(8).int32(flowTypeToNumber(message.flowType));
    }
    if (message.info !== undefined) {
      MessageInfo.encode(message.info, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Start {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.flowType = flowTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.info = MessageInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Start {
    return {
      flowType: isSet(object.flowType) ? flowTypeFromJSON(object.flowType) : FlowType.LLM,
      info: isSet(object.info) ? MessageInfo.fromJSON(object.info) : undefined,
    };
  },

  toJSON(message: Start): unknown {
    const obj: any = {};
    if (message.flowType !== FlowType.LLM) {
      obj.flowType = flowTypeToJSON(message.flowType);
    }
    if (message.info !== undefined) {
      obj.info = MessageInfo.toJSON(message.info);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Start>, I>>(base?: I): Start {
    return Start.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Start>, I>>(object: I): Start {
    const message = createBaseStart();
    message.flowType = object.flowType ?? FlowType.LLM;
    message.info = (object.info !== undefined && object.info !== null)
      ? MessageInfo.fromPartial(object.info)
      : undefined;
    return message;
  },
};

function createBaseStop(): Stop {
  return { flowType: FlowType.LLM, info: undefined };
}

export const Stop: MessageFns<Stop> = {
  encode(message: Stop, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.flowType !== FlowType.LLM) {
      writer.uint32(8).int32(flowTypeToNumber(message.flowType));
    }
    if (message.info !== undefined) {
      MessageInfo.encode(message.info, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Stop {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStop();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.flowType = flowTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.info = MessageInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Stop {
    return {
      flowType: isSet(object.flowType) ? flowTypeFromJSON(object.flowType) : FlowType.LLM,
      info: isSet(object.info) ? MessageInfo.fromJSON(object.info) : undefined,
    };
  },

  toJSON(message: Stop): unknown {
    const obj: any = {};
    if (message.flowType !== FlowType.LLM) {
      obj.flowType = flowTypeToJSON(message.flowType);
    }
    if (message.info !== undefined) {
      obj.info = MessageInfo.toJSON(message.info);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Stop>, I>>(base?: I): Stop {
    return Stop.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Stop>, I>>(object: I): Stop {
    const message = createBaseStop();
    message.flowType = object.flowType ?? FlowType.LLM;
    message.info = (object.info !== undefined && object.info !== null)
      ? MessageInfo.fromPartial(object.info)
      : undefined;
    return message;
  },
};

function createBaseTurnDetected(): TurnDetected {
  return { segments: [], text: "", info: undefined };
}

export const TurnDetected: MessageFns<TurnDetected> = {
  encode(message: TurnDetected, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.segments) {
      Segment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.info !== undefined) {
      MessageInfo.encode(message.info, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TurnDetected {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTurnDetected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.segments.push(Segment.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.info = MessageInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TurnDetected {
    return {
      segments: globalThis.Array.isArray(object?.segments) ? object.segments.map((e: any) => Segment.fromJSON(e)) : [],
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      info: isSet(object.info) ? MessageInfo.fromJSON(object.info) : undefined,
    };
  },

  toJSON(message: TurnDetected): unknown {
    const obj: any = {};
    if (message.segments?.length) {
      obj.segments = message.segments.map((e) => Segment.toJSON(e));
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.info !== undefined) {
      obj.info = MessageInfo.toJSON(message.info);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TurnDetected>, I>>(base?: I): TurnDetected {
    return TurnDetected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TurnDetected>, I>>(object: I): TurnDetected {
    const message = createBaseTurnDetected();
    message.segments = object.segments?.map((e) => Segment.fromPartial(e)) || [];
    message.text = object.text ?? "";
    message.info = (object.info !== undefined && object.info !== null)
      ? MessageInfo.fromPartial(object.info)
      : undefined;
    return message;
  },
};

type ProtoMetaMessageOptions = {
  options?: { [key: string]: any };
  fields?: { [key: string]: { [key: string]: any } };
  oneof?: { [key: string]: { [key: string]: any } };
  nested?: { [key: string]: ProtoMetaMessageOptions };
};

export interface ProtoMetadata {
  fileDescriptor: FileDescriptorProto1;
  references: { [key: string]: any };
  dependencies?: ProtoMetadata[];
  options?: {
    options?: { [key: string]: any };
    services?: {
      [key: string]: { options?: { [key: string]: any }; methods?: { [key: string]: { [key: string]: any } } };
    };
    messages?: { [key: string]: ProtoMetaMessageOptions };
    enums?: { [key: string]: { options?: { [key: string]: any }; values?: { [key: string]: { [key: string]: any } } } };
  };
}

export const protoMetadata = {
  fileDescriptor: {
    "name": "odin/v1/flow.proto",
    "package": "odin.v1",
    "dependency": [
      "odin/v1/common.proto",
      "odin/v1/options.proto",
      "odin/v1/session.proto",
      "odin/v1/text_helper.proto",
    ],
    "publicDependency": [],
    "weakDependency": [],
    "messageType": [{
      "name": "Start",
      "field": [{
        "name": "flow_type",
        "number": 1,
        "label": 1,
        "type": 14,
        "typeName": ".odin.v1.FlowType",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "flowType",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "info",
        "number": 2,
        "label": 1,
        "type": 11,
        "typeName": ".odin.v1.MessageInfo",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "info",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": {
        "messageSetWireFormat": false,
        "noStandardDescriptorAccessor": false,
        "deprecated": false,
        "mapEntry": false,
        "uninterpretedOption": [],
      },
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "Stop",
      "field": [{
        "name": "flow_type",
        "number": 1,
        "label": 1,
        "type": 14,
        "typeName": ".odin.v1.FlowType",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "flowType",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "info",
        "number": 2,
        "label": 1,
        "type": 11,
        "typeName": ".odin.v1.MessageInfo",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "info",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": {
        "messageSetWireFormat": false,
        "noStandardDescriptorAccessor": false,
        "deprecated": false,
        "mapEntry": false,
        "uninterpretedOption": [],
      },
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "TurnDetected",
      "field": [{
        "name": "segments",
        "number": 1,
        "label": 3,
        "type": 11,
        "typeName": ".odin.v1.Segment",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "segments",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "text",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "text",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "info",
        "number": 3,
        "label": 1,
        "type": 11,
        "typeName": ".odin.v1.MessageInfo",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "info",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": {
        "messageSetWireFormat": false,
        "noStandardDescriptorAccessor": false,
        "deprecated": false,
        "mapEntry": false,
        "uninterpretedOption": [],
      },
      "reservedRange": [],
      "reservedName": [],
    }],
    "enumType": [{
      "name": "FlowType",
      "value": [{ "name": "LLM", "number": 0, "options": undefined }, {
        "name": "SPEECH",
        "number": 1,
        "options": undefined,
      }],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }],
    "service": [],
    "extension": [],
    "options": {
      "javaPackage": "com.odin.v1",
      "javaOuterClassname": "FlowProto",
      "javaMultipleFiles": true,
      "javaGenerateEqualsAndHash": false,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": true,
      "objcClassPrefix": "OXX",
      "csharpNamespace": "Odin.V1",
      "swiftPrefix": "",
      "phpClassPrefix": "",
      "phpNamespace": "Odin\\V1",
      "phpMetadataNamespace": "Odin\\V1\\GPBMetadata",
      "rubyPackage": "Odin::V1",
      "uninterpretedOption": [],
    },
    "sourceCodeInfo": {
      "location": [{
        "path": [4, 2],
        "span": [29, 0, 35, 1],
        "leadingComments": " Flow information with role and content\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }],
    },
    "syntax": "proto3",
  },
  references: {
    ".odin.v1.FlowType": FlowType,
    ".odin.v1.Start": Start,
    ".odin.v1.Stop": Stop,
    ".odin.v1.TurnDetected": TurnDetected,
  },
  dependencies: [protoMetadata1, protoMetadata2, protoMetadata3, protoMetadata4],
  options: {
    messages: {
      "Start": { options: { "nats_subject": "flow.{session_id}.{instance_id}.start" } },
      "Stop": { options: { "nats_subject": "flow.{session_id}.{instance_id}.stop" } },
      "TurnDetected": { options: { "nats_subject": "flow.{session_id}.{instance_id}.turn_detected" } },
    },
  },
} as const satisfies ProtoMetadata;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
