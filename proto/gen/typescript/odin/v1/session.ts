// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: odin/v1/session.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FileDescriptorProto as FileDescriptorProto1 } from "ts-proto-descriptors";
import { protoMetadata as protoMetadata1 } from "./options";

export const protobufPackage = "odin.v1";

export enum ModuleStatus {
  INITIALIZING = "INITIALIZING",
  RUNNING = "RUNNING",
  FAILED = "FAILED",
  DISCONNECTED = "DISCONNECTED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function moduleStatusFromJSON(object: any): ModuleStatus {
  switch (object) {
    case 0:
    case "INITIALIZING":
      return ModuleStatus.INITIALIZING;
    case 1:
    case "RUNNING":
      return ModuleStatus.RUNNING;
    case 2:
    case "FAILED":
      return ModuleStatus.FAILED;
    case 3:
    case "DISCONNECTED":
      return ModuleStatus.DISCONNECTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ModuleStatus.UNRECOGNIZED;
  }
}

export function moduleStatusToJSON(object: ModuleStatus): string {
  switch (object) {
    case ModuleStatus.INITIALIZING:
      return "INITIALIZING";
    case ModuleStatus.RUNNING:
      return "RUNNING";
    case ModuleStatus.FAILED:
      return "FAILED";
    case ModuleStatus.DISCONNECTED:
      return "DISCONNECTED";
    case ModuleStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function moduleStatusToNumber(object: ModuleStatus): number {
  switch (object) {
    case ModuleStatus.INITIALIZING:
      return 0;
    case ModuleStatus.RUNNING:
      return 1;
    case ModuleStatus.FAILED:
      return 2;
    case ModuleStatus.DISCONNECTED:
      return 3;
    case ModuleStatus.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum ModuleType {
  STT = "STT",
  TTS = "TTS",
  AGENT = "AGENT",
  TURN = "TURN",
  RECORDER = "RECORDER",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function moduleTypeFromJSON(object: any): ModuleType {
  switch (object) {
    case 0:
    case "STT":
      return ModuleType.STT;
    case 1:
    case "TTS":
      return ModuleType.TTS;
    case 2:
    case "AGENT":
      return ModuleType.AGENT;
    case 3:
    case "TURN":
      return ModuleType.TURN;
    case 4:
    case "RECORDER":
      return ModuleType.RECORDER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ModuleType.UNRECOGNIZED;
  }
}

export function moduleTypeToJSON(object: ModuleType): string {
  switch (object) {
    case ModuleType.STT:
      return "STT";
    case ModuleType.TTS:
      return "TTS";
    case ModuleType.AGENT:
      return "AGENT";
    case ModuleType.TURN:
      return "TURN";
    case ModuleType.RECORDER:
      return "RECORDER";
    case ModuleType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function moduleTypeToNumber(object: ModuleType): number {
  switch (object) {
    case ModuleType.STT:
      return 0;
    case ModuleType.TTS:
      return 1;
    case ModuleType.AGENT:
      return 2;
    case ModuleType.TURN:
      return 3;
    case ModuleType.RECORDER:
      return 4;
    case ModuleType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface Init {
  sessionId: string;
  config: Uint8Array;
}

export interface Shutdown {
  sessionId: string;
}

export interface Command {
  init?: Init | undefined;
  shutdown?: Shutdown | undefined;
}

export interface Status {
  sessionId: string;
  instanceId: string;
  status: ModuleStatus;
  /** error text if FAILED */
  detail: string;
}

/** New messages for module bootup tracking */
export interface ModuleBootup {
  type: ModuleType;
  /** name of the module (eg. whisper-live for stt) */
  name: string;
  /** semi random id */
  instanceId: string;
  /** Unix timestamp */
  startedAt: number;
  /** module version */
  version: string;
  /** hostname/IP where module is running */
  host: string;
  /** JSON schema for module config */
  configSchema: string;
}

export interface ModuleHeartbeat {
  instanceId: string;
  /** Unix timestamp of heartbeat */
  timestamp: number;
  status: ModuleStatus;
  /** number of active sessions */
  activeSessions: number;
}

export interface ModuleRegistry {
  modules: ModuleBootup[];
  lastUpdated: number;
}

function createBaseInit(): Init {
  return { sessionId: "", config: new Uint8Array(0) };
}

export const Init: MessageFns<Init> = {
  encode(message: Init, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.config.length !== 0) {
      writer.uint32(18).bytes(message.config);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Init {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Init {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      config: isSet(object.config) ? bytesFromBase64(object.config) : new Uint8Array(0),
    };
  },

  toJSON(message: Init): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.config.length !== 0) {
      obj.config = base64FromBytes(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Init>, I>>(base?: I): Init {
    return Init.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Init>, I>>(object: I): Init {
    const message = createBaseInit();
    message.sessionId = object.sessionId ?? "";
    message.config = object.config ?? new Uint8Array(0);
    return message;
  },
};

function createBaseShutdown(): Shutdown {
  return { sessionId: "" };
}

export const Shutdown: MessageFns<Shutdown> = {
  encode(message: Shutdown, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Shutdown {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShutdown();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Shutdown {
    return { sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "" };
  },

  toJSON(message: Shutdown): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Shutdown>, I>>(base?: I): Shutdown {
    return Shutdown.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Shutdown>, I>>(object: I): Shutdown {
    const message = createBaseShutdown();
    message.sessionId = object.sessionId ?? "";
    return message;
  },
};

function createBaseCommand(): Command {
  return { init: undefined, shutdown: undefined };
}

export const Command: MessageFns<Command> = {
  encode(message: Command, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.init !== undefined) {
      Init.encode(message.init, writer.uint32(10).fork()).join();
    }
    if (message.shutdown !== undefined) {
      Shutdown.encode(message.shutdown, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Command {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.init = Init.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.shutdown = Shutdown.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Command {
    return {
      init: isSet(object.init) ? Init.fromJSON(object.init) : undefined,
      shutdown: isSet(object.shutdown) ? Shutdown.fromJSON(object.shutdown) : undefined,
    };
  },

  toJSON(message: Command): unknown {
    const obj: any = {};
    if (message.init !== undefined) {
      obj.init = Init.toJSON(message.init);
    }
    if (message.shutdown !== undefined) {
      obj.shutdown = Shutdown.toJSON(message.shutdown);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command>, I>>(base?: I): Command {
    return Command.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command>, I>>(object: I): Command {
    const message = createBaseCommand();
    message.init = (object.init !== undefined && object.init !== null) ? Init.fromPartial(object.init) : undefined;
    message.shutdown = (object.shutdown !== undefined && object.shutdown !== null)
      ? Shutdown.fromPartial(object.shutdown)
      : undefined;
    return message;
  },
};

function createBaseStatus(): Status {
  return { sessionId: "", instanceId: "", status: ModuleStatus.INITIALIZING, detail: "" };
}

export const Status: MessageFns<Status> = {
  encode(message: Status, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.instanceId !== "") {
      writer.uint32(18).string(message.instanceId);
    }
    if (message.status !== ModuleStatus.INITIALIZING) {
      writer.uint32(24).int32(moduleStatusToNumber(message.status));
    }
    if (message.detail !== "") {
      writer.uint32(34).string(message.detail);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Status {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = moduleStatusFromJSON(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.detail = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Status {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      status: isSet(object.status) ? moduleStatusFromJSON(object.status) : ModuleStatus.INITIALIZING,
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
    };
  },

  toJSON(message: Status): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.status !== ModuleStatus.INITIALIZING) {
      obj.status = moduleStatusToJSON(message.status);
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Status>, I>>(base?: I): Status {
    return Status.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Status>, I>>(object: I): Status {
    const message = createBaseStatus();
    message.sessionId = object.sessionId ?? "";
    message.instanceId = object.instanceId ?? "";
    message.status = object.status ?? ModuleStatus.INITIALIZING;
    message.detail = object.detail ?? "";
    return message;
  },
};

function createBaseModuleBootup(): ModuleBootup {
  return { type: ModuleType.STT, name: "", instanceId: "", startedAt: 0, version: "", host: "", configSchema: "" };
}

export const ModuleBootup: MessageFns<ModuleBootup> = {
  encode(message: ModuleBootup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== ModuleType.STT) {
      writer.uint32(8).int32(moduleTypeToNumber(message.type));
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.instanceId !== "") {
      writer.uint32(26).string(message.instanceId);
    }
    if (message.startedAt !== 0) {
      writer.uint32(32).int64(message.startedAt);
    }
    if (message.version !== "") {
      writer.uint32(42).string(message.version);
    }
    if (message.host !== "") {
      writer.uint32(50).string(message.host);
    }
    if (message.configSchema !== "") {
      writer.uint32(58).string(message.configSchema);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModuleBootup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModuleBootup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = moduleTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startedAt = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.host = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.configSchema = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModuleBootup {
    return {
      type: isSet(object.type) ? moduleTypeFromJSON(object.type) : ModuleType.STT,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      configSchema: isSet(object.configSchema) ? globalThis.String(object.configSchema) : "",
    };
  },

  toJSON(message: ModuleBootup): unknown {
    const obj: any = {};
    if (message.type !== ModuleType.STT) {
      obj.type = moduleTypeToJSON(message.type);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.configSchema !== "") {
      obj.configSchema = message.configSchema;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ModuleBootup>, I>>(base?: I): ModuleBootup {
    return ModuleBootup.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ModuleBootup>, I>>(object: I): ModuleBootup {
    const message = createBaseModuleBootup();
    message.type = object.type ?? ModuleType.STT;
    message.name = object.name ?? "";
    message.instanceId = object.instanceId ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.version = object.version ?? "";
    message.host = object.host ?? "";
    message.configSchema = object.configSchema ?? "";
    return message;
  },
};

function createBaseModuleHeartbeat(): ModuleHeartbeat {
  return { instanceId: "", timestamp: 0, status: ModuleStatus.INITIALIZING, activeSessions: 0 };
}

export const ModuleHeartbeat: MessageFns<ModuleHeartbeat> = {
  encode(message: ModuleHeartbeat, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instanceId !== "") {
      writer.uint32(18).string(message.instanceId);
    }
    if (message.timestamp !== 0) {
      writer.uint32(24).int64(message.timestamp);
    }
    if (message.status !== ModuleStatus.INITIALIZING) {
      writer.uint32(32).int32(moduleStatusToNumber(message.status));
    }
    if (message.activeSessions !== 0) {
      writer.uint32(40).int32(message.activeSessions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModuleHeartbeat {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModuleHeartbeat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = moduleStatusFromJSON(reader.int32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.activeSessions = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModuleHeartbeat {
    return {
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      status: isSet(object.status) ? moduleStatusFromJSON(object.status) : ModuleStatus.INITIALIZING,
      activeSessions: isSet(object.activeSessions) ? globalThis.Number(object.activeSessions) : 0,
    };
  },

  toJSON(message: ModuleHeartbeat): unknown {
    const obj: any = {};
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.status !== ModuleStatus.INITIALIZING) {
      obj.status = moduleStatusToJSON(message.status);
    }
    if (message.activeSessions !== 0) {
      obj.activeSessions = Math.round(message.activeSessions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ModuleHeartbeat>, I>>(base?: I): ModuleHeartbeat {
    return ModuleHeartbeat.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ModuleHeartbeat>, I>>(object: I): ModuleHeartbeat {
    const message = createBaseModuleHeartbeat();
    message.instanceId = object.instanceId ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.status = object.status ?? ModuleStatus.INITIALIZING;
    message.activeSessions = object.activeSessions ?? 0;
    return message;
  },
};

function createBaseModuleRegistry(): ModuleRegistry {
  return { modules: [], lastUpdated: 0 };
}

export const ModuleRegistry: MessageFns<ModuleRegistry> = {
  encode(message: ModuleRegistry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.modules) {
      ModuleBootup.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.lastUpdated !== 0) {
      writer.uint32(16).int64(message.lastUpdated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModuleRegistry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModuleRegistry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.modules.push(ModuleBootup.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lastUpdated = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModuleRegistry {
    return {
      modules: globalThis.Array.isArray(object?.modules)
        ? object.modules.map((e: any) => ModuleBootup.fromJSON(e))
        : [],
      lastUpdated: isSet(object.lastUpdated) ? globalThis.Number(object.lastUpdated) : 0,
    };
  },

  toJSON(message: ModuleRegistry): unknown {
    const obj: any = {};
    if (message.modules?.length) {
      obj.modules = message.modules.map((e) => ModuleBootup.toJSON(e));
    }
    if (message.lastUpdated !== 0) {
      obj.lastUpdated = Math.round(message.lastUpdated);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ModuleRegistry>, I>>(base?: I): ModuleRegistry {
    return ModuleRegistry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ModuleRegistry>, I>>(object: I): ModuleRegistry {
    const message = createBaseModuleRegistry();
    message.modules = object.modules?.map((e) => ModuleBootup.fromPartial(e)) || [];
    message.lastUpdated = object.lastUpdated ?? 0;
    return message;
  },
};

type ProtoMetaMessageOptions = {
  options?: { [key: string]: any };
  fields?: { [key: string]: { [key: string]: any } };
  oneof?: { [key: string]: { [key: string]: any } };
  nested?: { [key: string]: ProtoMetaMessageOptions };
};

export interface ProtoMetadata {
  fileDescriptor: FileDescriptorProto1;
  references: { [key: string]: any };
  dependencies?: ProtoMetadata[];
  options?: {
    options?: { [key: string]: any };
    services?: {
      [key: string]: { options?: { [key: string]: any }; methods?: { [key: string]: { [key: string]: any } } };
    };
    messages?: { [key: string]: ProtoMetaMessageOptions };
    enums?: { [key: string]: { options?: { [key: string]: any }; values?: { [key: string]: { [key: string]: any } } } };
  };
}

export const protoMetadata = {
  fileDescriptor: {
    "name": "odin/v1/session.proto",
    "package": "odin.v1",
    "dependency": ["odin/v1/options.proto"],
    "publicDependency": [],
    "weakDependency": [],
    "messageType": [{
      "name": "Init",
      "field": [{
        "name": "session_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sessionId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "config",
        "number": 2,
        "label": 1,
        "type": 12,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "config",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "Shutdown",
      "field": [{
        "name": "session_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sessionId",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "Command",
      "field": [{
        "name": "init",
        "number": 1,
        "label": 1,
        "type": 11,
        "typeName": ".odin.v1.Init",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "init",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "shutdown",
        "number": 2,
        "label": 1,
        "type": 11,
        "typeName": ".odin.v1.Shutdown",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "shutdown",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [{ "name": "cmd", "options": undefined }],
      "options": {
        "messageSetWireFormat": false,
        "noStandardDescriptorAccessor": false,
        "deprecated": false,
        "mapEntry": false,
        "uninterpretedOption": [],
      },
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "Status",
      "field": [{
        "name": "session_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sessionId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "instance_id",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "instanceId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "status",
        "number": 3,
        "label": 1,
        "type": 14,
        "typeName": ".odin.v1.ModuleStatus",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "status",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "detail",
        "number": 4,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "detail",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "ModuleBootup",
      "field": [{
        "name": "type",
        "number": 1,
        "label": 1,
        "type": 14,
        "typeName": ".odin.v1.ModuleType",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "type",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "name",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "name",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "instance_id",
        "number": 3,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "instanceId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "started_at",
        "number": 4,
        "label": 1,
        "type": 3,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "startedAt",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "version",
        "number": 5,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "version",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "host",
        "number": 6,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "host",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "config_schema",
        "number": 7,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "configSchema",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "ModuleHeartbeat",
      "field": [{
        "name": "instance_id",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "instanceId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "timestamp",
        "number": 3,
        "label": 1,
        "type": 3,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "timestamp",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "status",
        "number": 4,
        "label": 1,
        "type": 14,
        "typeName": ".odin.v1.ModuleStatus",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "status",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "active_sessions",
        "number": 5,
        "label": 1,
        "type": 5,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "activeSessions",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "ModuleRegistry",
      "field": [{
        "name": "modules",
        "number": 1,
        "label": 3,
        "type": 11,
        "typeName": ".odin.v1.ModuleBootup",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "modules",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "last_updated",
        "number": 2,
        "label": 1,
        "type": 3,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "lastUpdated",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }],
    "enumType": [{
      "name": "ModuleStatus",
      "value": [
        { "name": "INITIALIZING", "number": 0, "options": undefined },
        { "name": "RUNNING", "number": 1, "options": undefined },
        { "name": "FAILED", "number": 2, "options": undefined },
        { "name": "DISCONNECTED", "number": 3, "options": undefined },
      ],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "ModuleType",
      "value": [
        { "name": "STT", "number": 0, "options": undefined },
        { "name": "TTS", "number": 1, "options": undefined },
        { "name": "AGENT", "number": 2, "options": undefined },
        { "name": "TURN", "number": 3, "options": undefined },
        { "name": "RECORDER", "number": 4, "options": undefined },
      ],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }],
    "service": [],
    "extension": [],
    "options": {
      "javaPackage": "com.odin.v1",
      "javaOuterClassname": "SessionProto",
      "javaMultipleFiles": true,
      "javaGenerateEqualsAndHash": false,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": true,
      "objcClassPrefix": "OXX",
      "csharpNamespace": "Odin.V1",
      "swiftPrefix": "",
      "phpClassPrefix": "",
      "phpNamespace": "Odin\\V1",
      "phpMetadataNamespace": "Odin\\V1\\GPBMetadata",
      "rubyPackage": "Odin::V1",
      "uninterpretedOption": [],
    },
    "sourceCodeInfo": {
      "location": [{
        "path": [4, 3, 2, 3],
        "span": [43, 2, 30],
        "leadingComments": "",
        "trailingComments": " error text if FAILED\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 4],
        "span": [47, 0, 55, 1],
        "leadingComments": " New messages for module bootup tracking\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 4, 2, 1],
        "span": [49, 2, 18],
        "leadingComments": "",
        "trailingComments": " name of the module (eg. whisper-live for stt)\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 4, 2, 2],
        "span": [50, 2, 25],
        "leadingComments": "",
        "trailingComments": " semi random id\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 4, 2, 3],
        "span": [51, 2, 25],
        "leadingComments": "",
        "trailingComments": " Unix timestamp\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 4, 2, 4],
        "span": [52, 2, 25],
        "leadingComments": "",
        "trailingComments": " module version\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 4, 2, 5],
        "span": [53, 2, 25],
        "leadingComments": "",
        "trailingComments": " hostname/IP where module is running\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 4, 2, 6],
        "span": [54, 2, 27],
        "leadingComments": "",
        "trailingComments": " JSON schema for module config\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5, 2, 1],
        "span": [59, 2, 25],
        "leadingComments": "",
        "trailingComments": " Unix timestamp of heartbeat\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5, 2, 3],
        "span": [61, 2, 29],
        "leadingComments": "",
        "trailingComments": " number of active sessions\n",
        "leadingDetachedComments": [],
      }],
    },
    "syntax": "proto3",
  },
  references: {
    ".odin.v1.ModuleStatus": ModuleStatus,
    ".odin.v1.ModuleType": ModuleType,
    ".odin.v1.Init": Init,
    ".odin.v1.Shutdown": Shutdown,
    ".odin.v1.Command": Command,
    ".odin.v1.Status": Status,
    ".odin.v1.ModuleBootup": ModuleBootup,
    ".odin.v1.ModuleHeartbeat": ModuleHeartbeat,
    ".odin.v1.ModuleRegistry": ModuleRegistry,
  },
  dependencies: [protoMetadata1],
  options: { messages: { "Command": { options: { "nats_subject": "session.{session_id}.{instance_id}.cmd" } } } },
} as const satisfies ProtoMetadata;

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
