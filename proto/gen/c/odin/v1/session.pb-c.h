/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: odin/v1/session.proto */

#ifndef PROTOBUF_C_odin_2fv1_2fsession_2eproto__INCLUDED
#define PROTOBUF_C_odin_2fv1_2fsession_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif


typedef struct Odin__V1__Init Odin__V1__Init;
typedef struct Odin__V1__Shutdown Odin__V1__Shutdown;
typedef struct Odin__V1__Command Odin__V1__Command;
typedef struct Odin__V1__Status Odin__V1__Status;
typedef struct Odin__V1__ModuleBootup Odin__V1__ModuleBootup;
typedef struct Odin__V1__ModuleHeartbeat Odin__V1__ModuleHeartbeat;
typedef struct Odin__V1__ModuleRegistry Odin__V1__ModuleRegistry;


/* --- enums --- */

typedef enum _Odin__V1__ModuleStatus {
  ODIN__V1__MODULE_STATUS__INITIALIZING = 0,
  ODIN__V1__MODULE_STATUS__RUNNING = 1,
  ODIN__V1__MODULE_STATUS__FAILED = 2,
  ODIN__V1__MODULE_STATUS__DISCONNECTED = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ODIN__V1__MODULE_STATUS)
} Odin__V1__ModuleStatus;
typedef enum _Odin__V1__ModuleType {
  ODIN__V1__MODULE_TYPE__STT = 0,
  ODIN__V1__MODULE_TYPE__TTS = 1,
  ODIN__V1__MODULE_TYPE__AGENT = 2,
  ODIN__V1__MODULE_TYPE__TURN = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ODIN__V1__MODULE_TYPE)
} Odin__V1__ModuleType;

/* --- messages --- */

struct  Odin__V1__Init
{
  ProtobufCMessage base;
  char *session_id;
  ProtobufCBinaryData config;
};
#define ODIN__V1__INIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&odin__v1__init__descriptor) \
    , (char *)protobuf_c_empty_string, {0,NULL} }


struct  Odin__V1__Shutdown
{
  ProtobufCMessage base;
  char *session_id;
};
#define ODIN__V1__SHUTDOWN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&odin__v1__shutdown__descriptor) \
    , (char *)protobuf_c_empty_string }


typedef enum {
  ODIN__V1__COMMAND__CMD__NOT_SET = 0,
  ODIN__V1__COMMAND__CMD_INIT = 1,
  ODIN__V1__COMMAND__CMD_SHUTDOWN = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ODIN__V1__COMMAND__CMD__CASE)
} Odin__V1__Command__CmdCase;

struct  Odin__V1__Command
{
  ProtobufCMessage base;
  Odin__V1__Command__CmdCase cmd_case;
  union {
    Odin__V1__Init *init;
    Odin__V1__Shutdown *shutdown;
  };
};
#define ODIN__V1__COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&odin__v1__command__descriptor) \
    , ODIN__V1__COMMAND__CMD__NOT_SET, {0} }


struct  Odin__V1__Status
{
  ProtobufCMessage base;
  char *session_id;
  char *instance_id;
  Odin__V1__ModuleStatus status;
  /*
   * error text if FAILED
   */
  char *detail;
};
#define ODIN__V1__STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&odin__v1__status__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, ODIN__V1__MODULE_STATUS__INITIALIZING, (char *)protobuf_c_empty_string }


/*
 * New messages for module bootup tracking
 */
struct  Odin__V1__ModuleBootup
{
  ProtobufCMessage base;
  Odin__V1__ModuleType type;
  /*
   * name of the module (eg. whisper-live for stt)
   */
  char *name;
  /*
   * semi random id
   */
  char *instance_id;
  /*
   * Unix timestamp
   */
  int64_t started_at;
  /*
   * module version
   */
  char *version;
  /*
   * hostname/IP where module is running
   */
  char *host;
  /*
   * JSON schema for module config
   */
  char *config_schema;
};
#define ODIN__V1__MODULE_BOOTUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&odin__v1__module_bootup__descriptor) \
    , ODIN__V1__MODULE_TYPE__STT, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Odin__V1__ModuleHeartbeat
{
  ProtobufCMessage base;
  char *instance_id;
  /*
   * Unix timestamp of heartbeat
   */
  int64_t timestamp;
  Odin__V1__ModuleStatus status;
  /*
   * number of active sessions
   */
  int32_t active_sessions;
};
#define ODIN__V1__MODULE_HEARTBEAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&odin__v1__module_heartbeat__descriptor) \
    , (char *)protobuf_c_empty_string, 0, ODIN__V1__MODULE_STATUS__INITIALIZING, 0 }


struct  Odin__V1__ModuleRegistry
{
  ProtobufCMessage base;
  size_t n_modules;
  Odin__V1__ModuleBootup **modules;
  int64_t last_updated;
};
#define ODIN__V1__MODULE_REGISTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&odin__v1__module_registry__descriptor) \
    , 0,NULL, 0 }


/* Odin__V1__Init methods */
void   odin__v1__init__init
                     (Odin__V1__Init         *message);
size_t odin__v1__init__get_packed_size
                     (const Odin__V1__Init   *message);
size_t odin__v1__init__pack
                     (const Odin__V1__Init   *message,
                      uint8_t             *out);
size_t odin__v1__init__pack_to_buffer
                     (const Odin__V1__Init   *message,
                      ProtobufCBuffer     *buffer);
Odin__V1__Init *
       odin__v1__init__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   odin__v1__init__free_unpacked
                     (Odin__V1__Init *message,
                      ProtobufCAllocator *allocator);
/* Odin__V1__Shutdown methods */
void   odin__v1__shutdown__init
                     (Odin__V1__Shutdown         *message);
size_t odin__v1__shutdown__get_packed_size
                     (const Odin__V1__Shutdown   *message);
size_t odin__v1__shutdown__pack
                     (const Odin__V1__Shutdown   *message,
                      uint8_t             *out);
size_t odin__v1__shutdown__pack_to_buffer
                     (const Odin__V1__Shutdown   *message,
                      ProtobufCBuffer     *buffer);
Odin__V1__Shutdown *
       odin__v1__shutdown__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   odin__v1__shutdown__free_unpacked
                     (Odin__V1__Shutdown *message,
                      ProtobufCAllocator *allocator);
/* Odin__V1__Command methods */
void   odin__v1__command__init
                     (Odin__V1__Command         *message);
size_t odin__v1__command__get_packed_size
                     (const Odin__V1__Command   *message);
size_t odin__v1__command__pack
                     (const Odin__V1__Command   *message,
                      uint8_t             *out);
size_t odin__v1__command__pack_to_buffer
                     (const Odin__V1__Command   *message,
                      ProtobufCBuffer     *buffer);
Odin__V1__Command *
       odin__v1__command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   odin__v1__command__free_unpacked
                     (Odin__V1__Command *message,
                      ProtobufCAllocator *allocator);
/* Odin__V1__Status methods */
void   odin__v1__status__init
                     (Odin__V1__Status         *message);
size_t odin__v1__status__get_packed_size
                     (const Odin__V1__Status   *message);
size_t odin__v1__status__pack
                     (const Odin__V1__Status   *message,
                      uint8_t             *out);
size_t odin__v1__status__pack_to_buffer
                     (const Odin__V1__Status   *message,
                      ProtobufCBuffer     *buffer);
Odin__V1__Status *
       odin__v1__status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   odin__v1__status__free_unpacked
                     (Odin__V1__Status *message,
                      ProtobufCAllocator *allocator);
/* Odin__V1__ModuleBootup methods */
void   odin__v1__module_bootup__init
                     (Odin__V1__ModuleBootup         *message);
size_t odin__v1__module_bootup__get_packed_size
                     (const Odin__V1__ModuleBootup   *message);
size_t odin__v1__module_bootup__pack
                     (const Odin__V1__ModuleBootup   *message,
                      uint8_t             *out);
size_t odin__v1__module_bootup__pack_to_buffer
                     (const Odin__V1__ModuleBootup   *message,
                      ProtobufCBuffer     *buffer);
Odin__V1__ModuleBootup *
       odin__v1__module_bootup__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   odin__v1__module_bootup__free_unpacked
                     (Odin__V1__ModuleBootup *message,
                      ProtobufCAllocator *allocator);
/* Odin__V1__ModuleHeartbeat methods */
void   odin__v1__module_heartbeat__init
                     (Odin__V1__ModuleHeartbeat         *message);
size_t odin__v1__module_heartbeat__get_packed_size
                     (const Odin__V1__ModuleHeartbeat   *message);
size_t odin__v1__module_heartbeat__pack
                     (const Odin__V1__ModuleHeartbeat   *message,
                      uint8_t             *out);
size_t odin__v1__module_heartbeat__pack_to_buffer
                     (const Odin__V1__ModuleHeartbeat   *message,
                      ProtobufCBuffer     *buffer);
Odin__V1__ModuleHeartbeat *
       odin__v1__module_heartbeat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   odin__v1__module_heartbeat__free_unpacked
                     (Odin__V1__ModuleHeartbeat *message,
                      ProtobufCAllocator *allocator);
/* Odin__V1__ModuleRegistry methods */
void   odin__v1__module_registry__init
                     (Odin__V1__ModuleRegistry         *message);
size_t odin__v1__module_registry__get_packed_size
                     (const Odin__V1__ModuleRegistry   *message);
size_t odin__v1__module_registry__pack
                     (const Odin__V1__ModuleRegistry   *message,
                      uint8_t             *out);
size_t odin__v1__module_registry__pack_to_buffer
                     (const Odin__V1__ModuleRegistry   *message,
                      ProtobufCBuffer     *buffer);
Odin__V1__ModuleRegistry *
       odin__v1__module_registry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   odin__v1__module_registry__free_unpacked
                     (Odin__V1__ModuleRegistry *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Odin__V1__Init_Closure)
                 (const Odin__V1__Init *message,
                  void *closure_data);
typedef void (*Odin__V1__Shutdown_Closure)
                 (const Odin__V1__Shutdown *message,
                  void *closure_data);
typedef void (*Odin__V1__Command_Closure)
                 (const Odin__V1__Command *message,
                  void *closure_data);
typedef void (*Odin__V1__Status_Closure)
                 (const Odin__V1__Status *message,
                  void *closure_data);
typedef void (*Odin__V1__ModuleBootup_Closure)
                 (const Odin__V1__ModuleBootup *message,
                  void *closure_data);
typedef void (*Odin__V1__ModuleHeartbeat_Closure)
                 (const Odin__V1__ModuleHeartbeat *message,
                  void *closure_data);
typedef void (*Odin__V1__ModuleRegistry_Closure)
                 (const Odin__V1__ModuleRegistry *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    odin__v1__module_status__descriptor;
extern const ProtobufCEnumDescriptor    odin__v1__module_type__descriptor;
extern const ProtobufCMessageDescriptor odin__v1__init__descriptor;
extern const ProtobufCMessageDescriptor odin__v1__shutdown__descriptor;
extern const ProtobufCMessageDescriptor odin__v1__command__descriptor;
extern const ProtobufCMessageDescriptor odin__v1__status__descriptor;
extern const ProtobufCMessageDescriptor odin__v1__module_bootup__descriptor;
extern const ProtobufCMessageDescriptor odin__v1__module_heartbeat__descriptor;
extern const ProtobufCMessageDescriptor odin__v1__module_registry__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_odin_2fv1_2fsession_2eproto__INCLUDED */
