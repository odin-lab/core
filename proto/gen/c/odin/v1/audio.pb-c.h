/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: odin/v1/audio.proto */

#ifndef PROTOBUF_C_odin_2fv1_2faudio_2eproto__INCLUDED
#define PROTOBUF_C_odin_2fv1_2faudio_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "odin/v1/common.pb-c.h"
#include "odin/v1/options.pb-c.h"

typedef struct Odin__V1__AudioBufferMic Odin__V1__AudioBufferMic;
typedef struct Odin__V1__AudioBufferSpeaker Odin__V1__AudioBufferSpeaker;
typedef struct Odin__V1__AudioBufferSession Odin__V1__AudioBufferSession;


/* --- enums --- */


/* --- messages --- */

/*
 * Raw audio data chunks from microphone input
 * Subject pattern: audio.<session_id>.<module_name>.input
 */
struct  Odin__V1__AudioBufferMic
{
  ProtobufCMessage base;
  Odin__V1__AudioData *audio;
  char *client_id;
};
#define ODIN__V1__AUDIO_BUFFER_MIC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&odin__v1__audio_buffer_mic__descriptor) \
    , NULL, (char *)protobuf_c_empty_string }


/*
 * Generated speech audio from TTS
 * Subject pattern: audio.<session_id>.<module_name>.output
 */
struct  Odin__V1__AudioBufferSpeaker
{
  ProtobufCMessage base;
  Odin__V1__AudioData *audio;
  Odin__V1__SessionInfo *session;
};
#define ODIN__V1__AUDIO_BUFFER_SPEAKER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&odin__v1__audio_buffer_speaker__descriptor) \
    , NULL, NULL }


/*
 * Audio data with session information
 * Subject pattern: audio.<session_id>.<module_name>.<channel>
 */
struct  Odin__V1__AudioBufferSession
{
  ProtobufCMessage base;
  Odin__V1__AudioData *audio;
  Odin__V1__SessionInfo *session;
};
#define ODIN__V1__AUDIO_BUFFER_SESSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&odin__v1__audio_buffer_session__descriptor) \
    , NULL, NULL }


/* Odin__V1__AudioBufferMic methods */
void   odin__v1__audio_buffer_mic__init
                     (Odin__V1__AudioBufferMic         *message);
size_t odin__v1__audio_buffer_mic__get_packed_size
                     (const Odin__V1__AudioBufferMic   *message);
size_t odin__v1__audio_buffer_mic__pack
                     (const Odin__V1__AudioBufferMic   *message,
                      uint8_t             *out);
size_t odin__v1__audio_buffer_mic__pack_to_buffer
                     (const Odin__V1__AudioBufferMic   *message,
                      ProtobufCBuffer     *buffer);
Odin__V1__AudioBufferMic *
       odin__v1__audio_buffer_mic__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   odin__v1__audio_buffer_mic__free_unpacked
                     (Odin__V1__AudioBufferMic *message,
                      ProtobufCAllocator *allocator);
/* Odin__V1__AudioBufferSpeaker methods */
void   odin__v1__audio_buffer_speaker__init
                     (Odin__V1__AudioBufferSpeaker         *message);
size_t odin__v1__audio_buffer_speaker__get_packed_size
                     (const Odin__V1__AudioBufferSpeaker   *message);
size_t odin__v1__audio_buffer_speaker__pack
                     (const Odin__V1__AudioBufferSpeaker   *message,
                      uint8_t             *out);
size_t odin__v1__audio_buffer_speaker__pack_to_buffer
                     (const Odin__V1__AudioBufferSpeaker   *message,
                      ProtobufCBuffer     *buffer);
Odin__V1__AudioBufferSpeaker *
       odin__v1__audio_buffer_speaker__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   odin__v1__audio_buffer_speaker__free_unpacked
                     (Odin__V1__AudioBufferSpeaker *message,
                      ProtobufCAllocator *allocator);
/* Odin__V1__AudioBufferSession methods */
void   odin__v1__audio_buffer_session__init
                     (Odin__V1__AudioBufferSession         *message);
size_t odin__v1__audio_buffer_session__get_packed_size
                     (const Odin__V1__AudioBufferSession   *message);
size_t odin__v1__audio_buffer_session__pack
                     (const Odin__V1__AudioBufferSession   *message,
                      uint8_t             *out);
size_t odin__v1__audio_buffer_session__pack_to_buffer
                     (const Odin__V1__AudioBufferSession   *message,
                      ProtobufCBuffer     *buffer);
Odin__V1__AudioBufferSession *
       odin__v1__audio_buffer_session__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   odin__v1__audio_buffer_session__free_unpacked
                     (Odin__V1__AudioBufferSession *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Odin__V1__AudioBufferMic_Closure)
                 (const Odin__V1__AudioBufferMic *message,
                  void *closure_data);
typedef void (*Odin__V1__AudioBufferSpeaker_Closure)
                 (const Odin__V1__AudioBufferSpeaker *message,
                  void *closure_data);
typedef void (*Odin__V1__AudioBufferSession_Closure)
                 (const Odin__V1__AudioBufferSession *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor odin__v1__audio_buffer_mic__descriptor;
extern const ProtobufCMessageDescriptor odin__v1__audio_buffer_speaker__descriptor;
extern const ProtobufCMessageDescriptor odin__v1__audio_buffer_session__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_odin_2fv1_2faudio_2eproto__INCLUDED */
